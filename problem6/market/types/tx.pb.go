// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgDisableSpotMarket struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MarketName string `protobuf:"bytes,2,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`
}

func (m *MsgDisableSpotMarket) Reset()         { *m = MsgDisableSpotMarket{} }
func (m *MsgDisableSpotMarket) String() string { return proto.CompactTextString(m) }
func (*MsgDisableSpotMarket) ProtoMessage()    {}
func (*MsgDisableSpotMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{0}
}
func (m *MsgDisableSpotMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableSpotMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableSpotMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableSpotMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableSpotMarket.Merge(m, src)
}
func (m *MsgDisableSpotMarket) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableSpotMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableSpotMarket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableSpotMarket proto.InternalMessageInfo

type MsgDisableSpotMarketResponse struct {
}

func (m *MsgDisableSpotMarketResponse) Reset()         { *m = MsgDisableSpotMarketResponse{} }
func (m *MsgDisableSpotMarketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDisableSpotMarketResponse) ProtoMessage()    {}
func (*MsgDisableSpotMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{1}
}
func (m *MsgDisableSpotMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableSpotMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableSpotMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableSpotMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableSpotMarketResponse.Merge(m, src)
}
func (m *MsgDisableSpotMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableSpotMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableSpotMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableSpotMarketResponse proto.InternalMessageInfo

// this line is used by starport scaffolding # proto/tx/message
type MsgCreateMarket struct {
	Creator              string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MarketType           string                                 `protobuf:"bytes,3,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"`
	Base                 string                                 `protobuf:"bytes,4,opt,name=base,proto3" json:"base,omitempty"`
	Quote                string                                 `protobuf:"bytes,5,opt,name=quote,proto3" json:"quote,omitempty"`
	CurrentBasePriceUsd  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=current_base_price_usd,json=currentBasePriceUsd,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"current_base_price_usd"`
	CurrentQuotePriceUsd github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=current_quote_price_usd,json=currentQuotePriceUsd,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"current_quote_price_usd"`
	// futures only
	IndexOracleId string    `protobuf:"bytes,10,opt,name=index_oracle_id,json=indexOracleId,proto3" json:"index_oracle_id,omitempty"`
	ExpiryTime    time.Time `protobuf:"bytes,11,opt,name=expiry_time,json=expiryTime,proto3,stdtime" json:"expiry_time"`
}

func (m *MsgCreateMarket) Reset()         { *m = MsgCreateMarket{} }
func (m *MsgCreateMarket) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMarket) ProtoMessage()    {}
func (*MsgCreateMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{2}
}
func (m *MsgCreateMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMarket.Merge(m, src)
}
func (m *MsgCreateMarket) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMarket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMarket proto.InternalMessageInfo

type MsgCreateMarketResponse struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *MsgCreateMarketResponse) Reset()         { *m = MsgCreateMarketResponse{} }
func (m *MsgCreateMarketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMarketResponse) ProtoMessage()    {}
func (*MsgCreateMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{3}
}
func (m *MsgCreateMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMarketResponse.Merge(m, src)
}
func (m *MsgCreateMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMarketResponse proto.InternalMessageInfo

type MsgUpdateMarket struct {
	Updater      string       `protobuf:"bytes,1,opt,name=updater,proto3" json:"updater,omitempty"`
	MarketParams MarketParams `protobuf:"bytes,2,opt,name=market_params,json=marketParams,proto3" json:"market_params"`
}

func (m *MsgUpdateMarket) Reset()         { *m = MsgUpdateMarket{} }
func (m *MsgUpdateMarket) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMarket) ProtoMessage()    {}
func (*MsgUpdateMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{4}
}
func (m *MsgUpdateMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMarket.Merge(m, src)
}
func (m *MsgUpdateMarket) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMarket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMarket proto.InternalMessageInfo

type MsgUpdateMarketResponse struct {
}

func (m *MsgUpdateMarketResponse) Reset()         { *m = MsgUpdateMarketResponse{} }
func (m *MsgUpdateMarketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMarketResponse) ProtoMessage()    {}
func (*MsgUpdateMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{5}
}
func (m *MsgUpdateMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMarketResponse.Merge(m, src)
}
func (m *MsgUpdateMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMarketResponse proto.InternalMessageInfo

type MsgUpdatePerpetualsFundingInterval struct {
	Updater                   string        `protobuf:"bytes,1,opt,name=updater,proto3" json:"updater,omitempty"`
	PerpetualsFundingInterval time.Duration `protobuf:"bytes,2,opt,name=perpetuals_funding_interval,json=perpetualsFundingInterval,proto3,stdduration" json:"perpetuals_funding_interval"`
}

func (m *MsgUpdatePerpetualsFundingInterval) Reset()         { *m = MsgUpdatePerpetualsFundingInterval{} }
func (m *MsgUpdatePerpetualsFundingInterval) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePerpetualsFundingInterval) ProtoMessage()    {}
func (*MsgUpdatePerpetualsFundingInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{6}
}
func (m *MsgUpdatePerpetualsFundingInterval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePerpetualsFundingInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePerpetualsFundingInterval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePerpetualsFundingInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePerpetualsFundingInterval.Merge(m, src)
}
func (m *MsgUpdatePerpetualsFundingInterval) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePerpetualsFundingInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePerpetualsFundingInterval.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePerpetualsFundingInterval proto.InternalMessageInfo

type MsgUpdatePerpetualsFundingIntervalResponse struct {
}

func (m *MsgUpdatePerpetualsFundingIntervalResponse) Reset() {
	*m = MsgUpdatePerpetualsFundingIntervalResponse{}
}
func (m *MsgUpdatePerpetualsFundingIntervalResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUpdatePerpetualsFundingIntervalResponse) ProtoMessage() {}
func (*MsgUpdatePerpetualsFundingIntervalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{7}
}
func (m *MsgUpdatePerpetualsFundingIntervalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePerpetualsFundingIntervalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePerpetualsFundingIntervalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePerpetualsFundingIntervalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePerpetualsFundingIntervalResponse.Merge(m, src)
}
func (m *MsgUpdatePerpetualsFundingIntervalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePerpetualsFundingIntervalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePerpetualsFundingIntervalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePerpetualsFundingIntervalResponse proto.InternalMessageInfo

type MsgAddFeeTier struct {
	Creator     string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	FeeCategory FeeCategory `protobuf:"bytes,2,opt,name=fee_category,json=feeCategory,proto3" json:"fee_category"`
	FeeTier     FeeTier     `protobuf:"bytes,3,opt,name=fee_tier,json=feeTier,proto3" json:"fee_tier"`
}

func (m *MsgAddFeeTier) Reset()         { *m = MsgAddFeeTier{} }
func (m *MsgAddFeeTier) String() string { return proto.CompactTextString(m) }
func (*MsgAddFeeTier) ProtoMessage()    {}
func (*MsgAddFeeTier) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{8}
}
func (m *MsgAddFeeTier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddFeeTier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddFeeTier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddFeeTier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddFeeTier.Merge(m, src)
}
func (m *MsgAddFeeTier) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddFeeTier) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddFeeTier.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddFeeTier proto.InternalMessageInfo

type MsgAddFeeTierResponse struct {
	FeeTiers []FeeTier `protobuf:"bytes,1,rep,name=fee_tiers,json=feeTiers,proto3" json:"fee_tiers"`
}

func (m *MsgAddFeeTierResponse) Reset()         { *m = MsgAddFeeTierResponse{} }
func (m *MsgAddFeeTierResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddFeeTierResponse) ProtoMessage()    {}
func (*MsgAddFeeTierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{9}
}
func (m *MsgAddFeeTierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddFeeTierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddFeeTierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddFeeTierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddFeeTierResponse.Merge(m, src)
}
func (m *MsgAddFeeTierResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddFeeTierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddFeeTierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddFeeTierResponse proto.InternalMessageInfo

type MsgUpdateFeeTier struct {
	Updater       string                                  `protobuf:"bytes,1,opt,name=updater,proto3" json:"updater,omitempty"`
	FeeCategory   FeeCategory                             `protobuf:"bytes,2,opt,name=fee_category,json=feeCategory,proto3" json:"fee_category"`
	RequiredStake github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,3,opt,name=required_stake,json=requiredStake,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"required_stake"`
	TakerFee      *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=taker_fee,json=takerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"taker_fee,omitempty"`
	MakerFee      *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=maker_fee,json=makerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"maker_fee,omitempty"`
}

func (m *MsgUpdateFeeTier) Reset()         { *m = MsgUpdateFeeTier{} }
func (m *MsgUpdateFeeTier) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFeeTier) ProtoMessage()    {}
func (*MsgUpdateFeeTier) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{10}
}
func (m *MsgUpdateFeeTier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFeeTier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFeeTier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFeeTier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFeeTier.Merge(m, src)
}
func (m *MsgUpdateFeeTier) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFeeTier) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFeeTier.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFeeTier proto.InternalMessageInfo

type MsgUpdateFeeTierResponse struct {
	FeeTiers []FeeTier `protobuf:"bytes,1,rep,name=fee_tiers,json=feeTiers,proto3" json:"fee_tiers"`
}

func (m *MsgUpdateFeeTierResponse) Reset()         { *m = MsgUpdateFeeTierResponse{} }
func (m *MsgUpdateFeeTierResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFeeTierResponse) ProtoMessage()    {}
func (*MsgUpdateFeeTierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{11}
}
func (m *MsgUpdateFeeTierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFeeTierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFeeTierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFeeTierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFeeTierResponse.Merge(m, src)
}
func (m *MsgUpdateFeeTierResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFeeTierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFeeTierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFeeTierResponse proto.InternalMessageInfo

type MsgRemoveFeeTier struct {
	Remover       string                                 `protobuf:"bytes,1,opt,name=remover,proto3" json:"remover,omitempty"`
	FeeCategory   FeeCategory                            `protobuf:"bytes,2,opt,name=fee_category,json=feeCategory,proto3" json:"fee_category"`
	RequiredStake github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=required_stake,json=requiredStake,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"required_stake"`
}

func (m *MsgRemoveFeeTier) Reset()         { *m = MsgRemoveFeeTier{} }
func (m *MsgRemoveFeeTier) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveFeeTier) ProtoMessage()    {}
func (*MsgRemoveFeeTier) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{12}
}
func (m *MsgRemoveFeeTier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveFeeTier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveFeeTier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveFeeTier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveFeeTier.Merge(m, src)
}
func (m *MsgRemoveFeeTier) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveFeeTier) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveFeeTier.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveFeeTier proto.InternalMessageInfo

type MsgRemoveFeeTierResponse struct {
	FeeTiers []FeeTier `protobuf:"bytes,1,rep,name=fee_tiers,json=feeTiers,proto3" json:"fee_tiers"`
}

func (m *MsgRemoveFeeTierResponse) Reset()         { *m = MsgRemoveFeeTierResponse{} }
func (m *MsgRemoveFeeTierResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveFeeTierResponse) ProtoMessage()    {}
func (*MsgRemoveFeeTierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{13}
}
func (m *MsgRemoveFeeTierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveFeeTierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveFeeTierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveFeeTierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveFeeTierResponse.Merge(m, src)
}
func (m *MsgRemoveFeeTierResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveFeeTierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveFeeTierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveFeeTierResponse proto.InternalMessageInfo

type MsgSetStakeEquivalence struct {
	Setter           string           `protobuf:"bytes,1,opt,name=setter,proto3" json:"setter,omitempty"`
	StakeEquivalence StakeEquivalence `protobuf:"bytes,2,opt,name=stake_equivalence,json=stakeEquivalence,proto3" json:"stake_equivalence"`
}

func (m *MsgSetStakeEquivalence) Reset()         { *m = MsgSetStakeEquivalence{} }
func (m *MsgSetStakeEquivalence) String() string { return proto.CompactTextString(m) }
func (*MsgSetStakeEquivalence) ProtoMessage()    {}
func (*MsgSetStakeEquivalence) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{14}
}
func (m *MsgSetStakeEquivalence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetStakeEquivalence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetStakeEquivalence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetStakeEquivalence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetStakeEquivalence.Merge(m, src)
}
func (m *MsgSetStakeEquivalence) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetStakeEquivalence) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetStakeEquivalence.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetStakeEquivalence proto.InternalMessageInfo

type MsgSetStakeEquivalenceResponse struct {
	StakeEquivalences []StakeEquivalence `protobuf:"bytes,1,rep,name=stake_equivalences,json=stakeEquivalences,proto3" json:"stake_equivalences"`
}

func (m *MsgSetStakeEquivalenceResponse) Reset()         { *m = MsgSetStakeEquivalenceResponse{} }
func (m *MsgSetStakeEquivalenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetStakeEquivalenceResponse) ProtoMessage()    {}
func (*MsgSetStakeEquivalenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{15}
}
func (m *MsgSetStakeEquivalenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetStakeEquivalenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetStakeEquivalenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetStakeEquivalenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetStakeEquivalenceResponse.Merge(m, src)
}
func (m *MsgSetStakeEquivalenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetStakeEquivalenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetStakeEquivalenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetStakeEquivalenceResponse proto.InternalMessageInfo

type MsgUpdateAllPoolTradingFees struct {
	Creator                     string                         `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	UpdatePoolTradingFeesParams UpdateAllPoolTradingFeesParams `protobuf:"bytes,2,opt,name=update_pool_trading_fees_params,json=updatePoolTradingFeesParams,proto3" json:"update_pool_trading_fees_params"`
}

func (m *MsgUpdateAllPoolTradingFees) Reset()         { *m = MsgUpdateAllPoolTradingFees{} }
func (m *MsgUpdateAllPoolTradingFees) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAllPoolTradingFees) ProtoMessage()    {}
func (*MsgUpdateAllPoolTradingFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{16}
}
func (m *MsgUpdateAllPoolTradingFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAllPoolTradingFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAllPoolTradingFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAllPoolTradingFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAllPoolTradingFees.Merge(m, src)
}
func (m *MsgUpdateAllPoolTradingFees) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAllPoolTradingFees) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAllPoolTradingFees.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAllPoolTradingFees proto.InternalMessageInfo

type MsgUpdateAllPoolTradingFeesResponse struct {
}

func (m *MsgUpdateAllPoolTradingFeesResponse) Reset()         { *m = MsgUpdateAllPoolTradingFeesResponse{} }
func (m *MsgUpdateAllPoolTradingFeesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAllPoolTradingFeesResponse) ProtoMessage()    {}
func (*MsgUpdateAllPoolTradingFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{17}
}
func (m *MsgUpdateAllPoolTradingFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAllPoolTradingFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAllPoolTradingFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAllPoolTradingFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAllPoolTradingFeesResponse.Merge(m, src)
}
func (m *MsgUpdateAllPoolTradingFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAllPoolTradingFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAllPoolTradingFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAllPoolTradingFeesResponse proto.InternalMessageInfo

type UpdateAllPoolTradingFeesParams struct {
	MarketType string                                 `protobuf:"bytes,1,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"`
	MakerFee   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=maker_fee,json=makerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"maker_fee"`
	TakerFee   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=taker_fee,json=takerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"taker_fee"`
}

func (m *UpdateAllPoolTradingFeesParams) Reset()         { *m = UpdateAllPoolTradingFeesParams{} }
func (m *UpdateAllPoolTradingFeesParams) String() string { return proto.CompactTextString(m) }
func (*UpdateAllPoolTradingFeesParams) ProtoMessage()    {}
func (*UpdateAllPoolTradingFeesParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{18}
}
func (m *UpdateAllPoolTradingFeesParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAllPoolTradingFeesParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAllPoolTradingFeesParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAllPoolTradingFeesParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAllPoolTradingFeesParams.Merge(m, src)
}
func (m *UpdateAllPoolTradingFeesParams) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAllPoolTradingFeesParams) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAllPoolTradingFeesParams.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAllPoolTradingFeesParams proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDisableSpotMarket)(nil), "Switcheo.carbon.market.MsgDisableSpotMarket")
	proto.RegisterType((*MsgDisableSpotMarketResponse)(nil), "Switcheo.carbon.market.MsgDisableSpotMarketResponse")
	proto.RegisterType((*MsgCreateMarket)(nil), "Switcheo.carbon.market.MsgCreateMarket")
	proto.RegisterType((*MsgCreateMarketResponse)(nil), "Switcheo.carbon.market.MsgCreateMarketResponse")
	proto.RegisterType((*MsgUpdateMarket)(nil), "Switcheo.carbon.market.MsgUpdateMarket")
	proto.RegisterType((*MsgUpdateMarketResponse)(nil), "Switcheo.carbon.market.MsgUpdateMarketResponse")
	proto.RegisterType((*MsgUpdatePerpetualsFundingInterval)(nil), "Switcheo.carbon.market.MsgUpdatePerpetualsFundingInterval")
	proto.RegisterType((*MsgUpdatePerpetualsFundingIntervalResponse)(nil), "Switcheo.carbon.market.MsgUpdatePerpetualsFundingIntervalResponse")
	proto.RegisterType((*MsgAddFeeTier)(nil), "Switcheo.carbon.market.MsgAddFeeTier")
	proto.RegisterType((*MsgAddFeeTierResponse)(nil), "Switcheo.carbon.market.MsgAddFeeTierResponse")
	proto.RegisterType((*MsgUpdateFeeTier)(nil), "Switcheo.carbon.market.MsgUpdateFeeTier")
	proto.RegisterType((*MsgUpdateFeeTierResponse)(nil), "Switcheo.carbon.market.MsgUpdateFeeTierResponse")
	proto.RegisterType((*MsgRemoveFeeTier)(nil), "Switcheo.carbon.market.MsgRemoveFeeTier")
	proto.RegisterType((*MsgRemoveFeeTierResponse)(nil), "Switcheo.carbon.market.MsgRemoveFeeTierResponse")
	proto.RegisterType((*MsgSetStakeEquivalence)(nil), "Switcheo.carbon.market.MsgSetStakeEquivalence")
	proto.RegisterType((*MsgSetStakeEquivalenceResponse)(nil), "Switcheo.carbon.market.MsgSetStakeEquivalenceResponse")
	proto.RegisterType((*MsgUpdateAllPoolTradingFees)(nil), "Switcheo.carbon.market.MsgUpdateAllPoolTradingFees")
	proto.RegisterType((*MsgUpdateAllPoolTradingFeesResponse)(nil), "Switcheo.carbon.market.MsgUpdateAllPoolTradingFeesResponse")
	proto.RegisterType((*UpdateAllPoolTradingFeesParams)(nil), "Switcheo.carbon.market.UpdateAllPoolTradingFeesParams")
}

func init() { proto.RegisterFile("market/tx.proto", fileDescriptor_2966ca2342567dca) }

var fileDescriptor_2966ca2342567dca = []byte{
	// 1160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xcf, 0x6f, 0xe3, 0xc4,
	0x17, 0xaf, 0x9b, 0xfe, 0x48, 0x5f, 0xda, 0x6f, 0x5b, 0xb7, 0xdf, 0x6e, 0x9a, 0x22, 0xa7, 0xf2,
	0xb2, 0x4b, 0x41, 0x5b, 0x07, 0x75, 0xd1, 0x1e, 0xe0, 0xc2, 0x66, 0xbb, 0x85, 0x02, 0x61, 0xbb,
	0x69, 0x7b, 0x61, 0x05, 0x96, 0x63, 0xbf, 0xb8, 0x56, 0x63, 0x8f, 0xeb, 0xb1, 0xbb, 0xad, 0x04,
	0x42, 0xe2, 0x8e, 0xb4, 0xe2, 0xc4, 0x15, 0xf1, 0x47, 0x20, 0x24, 0xfe, 0x80, 0x1e, 0x97, 0x1b,
	0x02, 0x69, 0x81, 0xf6, 0xc8, 0x3f, 0x81, 0x3c, 0x1e, 0xbb, 0x71, 0x7e, 0xb8, 0x4d, 0xd4, 0x0b,
	0xa7, 0x78, 0xde, 0x7c, 0xe6, 0xf3, 0x79, 0xf3, 0xde, 0xcc, 0x9b, 0x17, 0x98, 0xb5, 0x35, 0xef,
	0x10, 0xfd, 0x8a, 0x7f, 0xa2, 0xb8, 0x1e, 0xf1, 0x89, 0xb8, 0xb4, 0xfb, 0xdc, 0xf2, 0xf5, 0x03,
	0x24, 0x8a, 0xae, 0x79, 0x0d, 0xe2, 0x28, 0x11, 0xa0, 0x34, 0xc7, 0x81, 0x4d, 0xc4, 0x08, 0x59,
	0x5a, 0xe0, 0x96, 0xe8, 0x87, 0x1b, 0x17, 0x4d, 0x62, 0x12, 0xf6, 0x59, 0x09, 0xbf, 0xb8, 0xb5,
	0x6c, 0x12, 0x62, 0xb6, 0xb0, 0xc2, 0x46, 0x8d, 0xa0, 0x59, 0xf1, 0x2d, 0x1b, 0xa9, 0xaf, 0xd9,
	0x2e, 0x07, 0x48, 0x9d, 0x00, 0x23, 0xf0, 0x34, 0xdf, 0x22, 0x4e, 0x34, 0x2f, 0x3f, 0x85, 0xc5,
	0x1a, 0x35, 0x37, 0x2d, 0xaa, 0x35, 0x5a, 0xb8, 0xeb, 0x12, 0xbf, 0xc6, 0x44, 0xc5, 0x22, 0x4c,
	0xea, 0x1e, 0x6a, 0x3e, 0xf1, 0x8a, 0xc2, 0xaa, 0xb0, 0x36, 0x55, 0x8f, 0x87, 0x62, 0x19, 0x0a,
	0x91, 0x63, 0xaa, 0xa3, 0xd9, 0x58, 0x1c, 0x65, 0xb3, 0x10, 0x99, 0x3e, 0xd5, 0x6c, 0x94, 0x25,
	0x78, 0xad, 0x17, 0x65, 0x1d, 0xa9, 0x4b, 0x1c, 0x8a, 0xf2, 0x4f, 0x39, 0x98, 0xad, 0x51, 0xf3,
	0x51, 0xc8, 0x87, 0x03, 0xc8, 0xf9, 0xa7, 0x2e, 0x16, 0x73, 0xed, 0x72, 0x7b, 0xa7, 0x2e, 0x8a,
	0x22, 0x8c, 0x35, 0x34, 0x8a, 0xc5, 0x31, 0x36, 0xc3, 0xbe, 0xc5, 0x45, 0x18, 0x3f, 0x0a, 0x88,
	0x8f, 0xc5, 0x71, 0x66, 0x8c, 0x06, 0xa2, 0x0e, 0x4b, 0x7a, 0xe0, 0x79, 0xe8, 0xf8, 0x6a, 0x88,
	0x52, 0x5d, 0xcf, 0xd2, 0x51, 0x0d, 0xa8, 0x51, 0x9c, 0x08, 0x61, 0x55, 0xe5, 0xec, 0x55, 0x79,
	0xe4, 0xf7, 0x57, 0xe5, 0xbb, 0xa6, 0xe5, 0x1f, 0x04, 0x0d, 0x45, 0x27, 0x76, 0x45, 0x27, 0xd4,
	0x26, 0x94, 0xff, 0xac, 0x53, 0xe3, 0xb0, 0x12, 0xba, 0x41, 0x95, 0x4d, 0xd4, 0xeb, 0x0b, 0x9c,
	0xad, 0xaa, 0x51, 0xdc, 0x09, 0xb9, 0xf6, 0xa9, 0x21, 0x22, 0xdc, 0x8a, 0x45, 0x98, 0x6a, 0x9b,
	0xca, 0xe4, 0x50, 0x2a, 0x8b, 0x9c, 0xee, 0x69, 0xc8, 0x96, 0xc8, 0xdc, 0x85, 0x59, 0xcb, 0x31,
	0xf0, 0x44, 0x25, 0x9e, 0xa6, 0xb7, 0x50, 0xb5, 0x8c, 0x22, 0xb0, 0xbd, 0xce, 0x30, 0xf3, 0x13,
	0x66, 0xdd, 0x36, 0xc4, 0xc7, 0x50, 0xc0, 0x13, 0xd7, 0xf2, 0x4e, 0xd5, 0xf0, 0x64, 0x14, 0x0b,
	0xab, 0xc2, 0x5a, 0x61, 0xa3, 0xa4, 0x44, 0xa7, 0x42, 0x89, 0x4f, 0x85, 0xb2, 0x17, 0x1f, 0x9b,
	0x6a, 0x3e, 0x74, 0xef, 0xc5, 0x9f, 0x65, 0xa1, 0x0e, 0xd1, 0xc2, 0x70, 0xea, 0xa3, 0xb1, 0xfc,
	0xe8, 0x5c, 0x4e, 0x5e, 0x87, 0x5b, 0x1d, 0x89, 0x8b, 0x93, 0x1a, 0x66, 0x81, 0x1d, 0x87, 0x28,
	0x7b, 0xec, 0x5b, 0xfe, 0x92, 0xe5, 0x79, 0xdf, 0x35, 0x52, 0x79, 0x0e, 0xd8, 0x38, 0xc9, 0x33,
	0x1f, 0x8a, 0x4f, 0x60, 0x86, 0xe7, 0xd9, 0xd5, 0x3c, 0xcd, 0xa6, 0xec, 0x60, 0x15, 0x36, 0x5e,
	0x57, 0x7a, 0x5f, 0x1b, 0x25, 0x22, 0xdc, 0x61, 0xd8, 0xea, 0x58, 0xe8, 0x74, 0x7d, 0xda, 0x6e,
	0xb3, 0xc9, 0xcb, 0xcc, 0xd9, 0x76, 0xf5, 0xe4, 0x04, 0xfe, 0x28, 0x80, 0x9c, 0xcc, 0xed, 0xa0,
	0xe7, 0xa2, 0x1f, 0x68, 0x2d, 0xba, 0x15, 0x38, 0x86, 0xe5, 0x98, 0xdb, 0x8e, 0x8f, 0xde, 0xb1,
	0xd6, 0xca, 0x70, 0x56, 0x87, 0x15, 0x37, 0x59, 0xa6, 0x36, 0xa3, 0x75, 0xaa, 0xc5, 0x17, 0x72,
	0xd7, 0x97, 0xbb, 0xa2, 0xbc, 0xc9, 0xef, 0x5e, 0x14, 0xe4, 0xef, 0xc3, 0x20, 0x2f, 0xbb, 0xfd,
	0xe4, 0xe5, 0x7b, 0xf0, 0xd6, 0xd5, 0x4e, 0x26, 0x7b, 0xfa, 0x59, 0x80, 0x99, 0x1a, 0x35, 0x1f,
	0x1a, 0xc6, 0x16, 0xe2, 0x9e, 0x85, 0x5e, 0xc6, 0x9d, 0xfa, 0x04, 0xa6, 0x9b, 0x88, 0xaa, 0xae,
	0xf9, 0x68, 0x12, 0xef, 0x94, 0xfb, 0x7b, 0xbb, 0x5f, 0xa8, 0xb7, 0x10, 0x1f, 0x71, 0x28, 0x8f,
	0x74, 0xa1, 0x79, 0x69, 0x12, 0xdf, 0x87, 0x7c, 0xc8, 0xe6, 0x5b, 0xe8, 0xb1, 0xeb, 0x59, 0xd8,
	0x28, 0x67, 0x30, 0x85, 0xae, 0x71, 0x96, 0xc9, 0x66, 0x34, 0x94, 0x9f, 0xc1, 0xff, 0x53, 0xae,
	0x27, 0xa7, 0xaa, 0x0a, 0x53, 0x31, 0x35, 0x2d, 0x0a, 0xab, 0xb9, 0xeb, 0x73, 0xe7, 0x39, 0x37,
	0x95, 0xff, 0x19, 0x85, 0xb9, 0x24, 0x8e, 0x6d, 0xb1, 0xe9, 0x93, 0xda, 0x9b, 0x8d, 0xcd, 0x3e,
	0xfc, 0xcf, 0xc3, 0xa3, 0xc0, 0xf2, 0xd0, 0x50, 0xa9, 0xaf, 0x1d, 0xf2, 0x02, 0x36, 0x50, 0x11,
	0xd8, 0x76, 0xfc, 0xfa, 0x4c, 0xcc, 0xb2, 0x1b, 0x92, 0x88, 0x1f, 0xc3, 0x54, 0xf8, 0xeb, 0xa9,
	0x4d, 0xe4, 0x85, 0x8f, 0x31, 0x0a, 0x03, 0x94, 0x95, 0x3c, 0x23, 0xd8, 0x42, 0x46, 0x66, 0x27,
	0x64, 0xe3, 0xc3, 0x91, 0xd9, 0x9c, 0x4c, 0xfe, 0x02, 0x8a, 0x9d, 0xc1, 0xbe, 0xd1, 0x6c, 0xfe,
	0x2a, 0xb0, 0x6c, 0xd6, 0xd1, 0x26, 0xc7, 0xed, 0xd9, 0xf4, 0x98, 0x21, 0xc9, 0x26, 0x1f, 0xfe,
	0x27, 0xb2, 0xc9, 0x63, 0x96, 0xda, 0xd2, 0x8d, 0xc6, 0xec, 0x5b, 0x01, 0x96, 0x6a, 0xd4, 0xdc,
	0x45, 0x9f, 0xe9, 0x3d, 0x3e, 0x0a, 0xac, 0x63, 0xad, 0x85, 0x8e, 0x8e, 0xe2, 0x12, 0x4c, 0x50,
	0xf4, 0x2f, 0xaf, 0x01, 0x1f, 0x89, 0xcf, 0x60, 0x9e, 0x6d, 0x50, 0xc5, 0x4b, 0x30, 0x0f, 0xde,
	0x5a, 0x3f, 0xf9, 0x4e, 0x72, 0xee, 0xc7, 0x1c, 0xed, 0xb0, 0xcb, 0x5f, 0x83, 0xd4, 0xdb, 0x9d,
	0x64, 0xd7, 0x9f, 0x83, 0xd8, 0x25, 0x1f, 0x6f, 0x7f, 0x50, 0xfd, 0xf9, 0x4e, 0x7d, 0x2a, 0xff,
	0x22, 0xc0, 0x4a, 0x72, 0x4a, 0x1f, 0xb6, 0x5a, 0x3b, 0x84, 0xb4, 0xf6, 0x3c, 0x2d, 0xac, 0xab,
	0x5b, 0x88, 0x34, 0xa3, 0x72, 0x7e, 0x23, 0x40, 0x39, 0xaa, 0x14, 0xaa, 0x4b, 0x48, 0x4b, 0xf5,
	0xa3, 0x55, 0xe1, 0xd5, 0xa1, 0xe9, 0x87, 0xeb, 0x41, 0x3f, 0x37, 0xfb, 0xa9, 0xa6, 0x9e, 0xb2,
	0x95, 0x48, 0xa4, 0x27, 0x44, 0xbe, 0x03, 0xb7, 0x33, 0xbc, 0x4f, 0x5e, 0x84, 0x3f, 0x04, 0x90,
	0xb2, 0xc5, 0x3a, 0x9b, 0x2b, 0xa1, 0xab, 0xb9, 0x4a, 0xd5, 0x86, 0xd1, 0xa1, 0xfa, 0x97, 0xa4,
	0x36, 0xa4, 0xab, 0x56, 0x6e, 0x38, 0xb2, 0xb8, 0x6a, 0x6d, 0x9c, 0xe5, 0x21, 0x57, 0xa3, 0xa6,
	0x78, 0x00, 0xd3, 0xa9, 0x4e, 0xf2, 0x8d, 0xbe, 0x0d, 0x43, 0xba, 0x73, 0x29, 0x55, 0xae, 0x09,
	0x4c, 0x0e, 0xe5, 0x01, 0x4c, 0xa7, 0x7a, 0x99, 0x2c, 0xa5, 0x76, 0x60, 0xa6, 0x52, 0xaf, 0xfe,
	0x44, 0xfc, 0x41, 0x80, 0xf2, 0x55, 0xcd, 0xc9, 0xbb, 0x57, 0x92, 0xf6, 0x5d, 0x5b, 0xaa, 0x0e,
	0xbf, 0x36, 0xf1, 0xf1, 0x39, 0xcc, 0x77, 0xff, 0x6b, 0xb8, 0x97, 0x41, 0xdc, 0x85, 0x2e, 0xbd,
	0x33, 0x08, 0x3a, 0x11, 0x6e, 0x00, 0xb4, 0x35, 0x39, 0x77, 0x32, 0x38, 0x2e, 0x61, 0xa5, 0xf5,
	0x6b, 0xc1, 0x12, 0x8d, 0x43, 0x98, 0x49, 0xf7, 0x0b, 0x6b, 0x57, 0x46, 0x2c, 0x56, 0x7a, 0xfb,
	0xba, 0xc8, 0x76, 0xb1, 0xf4, 0x73, 0x96, 0x25, 0x96, 0x42, 0x66, 0x8a, 0xf5, 0x7e, 0x4f, 0xbe,
	0x82, 0x85, 0x5e, 0xef, 0x80, 0x92, 0x41, 0xd4, 0x03, 0x5f, 0x7a, 0x30, 0x18, 0x3e, 0x91, 0xff,
	0x4e, 0x00, 0xe9, 0x43, 0xcd, 0x31, 0x5a, 0xd8, 0xb7, 0xf8, 0xde, 0xbf, 0x32, 0x80, 0xdd, 0x8b,
	0x4a, 0xef, 0x0d, 0xb1, 0x28, 0x76, 0xaa, 0xfa, 0xc1, 0xd9, 0xdf, 0xd2, 0xc8, 0xd9, 0xb9, 0x24,
	0xbc, 0x3c, 0x97, 0x84, 0xbf, 0xce, 0x25, 0xe1, 0xc5, 0x85, 0x34, 0xf2, 0xf2, 0x42, 0x1a, 0xf9,
	0xed, 0x42, 0x1a, 0xf9, 0xec, 0xcd, 0xb6, 0xd2, 0x14, 0x8b, 0x54, 0x22, 0x91, 0xca, 0x49, 0x25,
	0xfe, 0x97, 0x1f, 0x56, 0xa8, 0xc6, 0x04, 0xeb, 0xf4, 0xef, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x7f, 0xce, 0x01, 0x06, 0xfc, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateMarket(ctx context.Context, in *MsgCreateMarket, opts ...grpc.CallOption) (*MsgCreateMarketResponse, error)
	UpdateMarket(ctx context.Context, in *MsgUpdateMarket, opts ...grpc.CallOption) (*MsgUpdateMarketResponse, error)
	UpdatePerpetualsFundingInterval(ctx context.Context, in *MsgUpdatePerpetualsFundingInterval, opts ...grpc.CallOption) (*MsgUpdatePerpetualsFundingIntervalResponse, error)
	DisableSpotMarket(ctx context.Context, in *MsgDisableSpotMarket, opts ...grpc.CallOption) (*MsgDisableSpotMarketResponse, error)
	AddFeeTier(ctx context.Context, in *MsgAddFeeTier, opts ...grpc.CallOption) (*MsgAddFeeTierResponse, error)
	UpdateFeeTier(ctx context.Context, in *MsgUpdateFeeTier, opts ...grpc.CallOption) (*MsgUpdateFeeTierResponse, error)
	RemoveFeeTier(ctx context.Context, in *MsgRemoveFeeTier, opts ...grpc.CallOption) (*MsgRemoveFeeTierResponse, error)
	SetStakeEquivalence(ctx context.Context, in *MsgSetStakeEquivalence, opts ...grpc.CallOption) (*MsgSetStakeEquivalenceResponse, error)
	HandleUpdateAllPoolTradingFees(ctx context.Context, in *MsgUpdateAllPoolTradingFees, opts ...grpc.CallOption) (*MsgUpdateAllPoolTradingFeesResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateMarket(ctx context.Context, in *MsgCreateMarket, opts ...grpc.CallOption) (*MsgCreateMarketResponse, error) {
	out := new(MsgCreateMarketResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Msg/CreateMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMarket(ctx context.Context, in *MsgUpdateMarket, opts ...grpc.CallOption) (*MsgUpdateMarketResponse, error) {
	out := new(MsgUpdateMarketResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Msg/UpdateMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePerpetualsFundingInterval(ctx context.Context, in *MsgUpdatePerpetualsFundingInterval, opts ...grpc.CallOption) (*MsgUpdatePerpetualsFundingIntervalResponse, error) {
	out := new(MsgUpdatePerpetualsFundingIntervalResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Msg/UpdatePerpetualsFundingInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DisableSpotMarket(ctx context.Context, in *MsgDisableSpotMarket, opts ...grpc.CallOption) (*MsgDisableSpotMarketResponse, error) {
	out := new(MsgDisableSpotMarketResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Msg/DisableSpotMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddFeeTier(ctx context.Context, in *MsgAddFeeTier, opts ...grpc.CallOption) (*MsgAddFeeTierResponse, error) {
	out := new(MsgAddFeeTierResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Msg/AddFeeTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateFeeTier(ctx context.Context, in *MsgUpdateFeeTier, opts ...grpc.CallOption) (*MsgUpdateFeeTierResponse, error) {
	out := new(MsgUpdateFeeTierResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Msg/UpdateFeeTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveFeeTier(ctx context.Context, in *MsgRemoveFeeTier, opts ...grpc.CallOption) (*MsgRemoveFeeTierResponse, error) {
	out := new(MsgRemoveFeeTierResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Msg/RemoveFeeTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetStakeEquivalence(ctx context.Context, in *MsgSetStakeEquivalence, opts ...grpc.CallOption) (*MsgSetStakeEquivalenceResponse, error) {
	out := new(MsgSetStakeEquivalenceResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Msg/SetStakeEquivalence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleUpdateAllPoolTradingFees(ctx context.Context, in *MsgUpdateAllPoolTradingFees, opts ...grpc.CallOption) (*MsgUpdateAllPoolTradingFeesResponse, error) {
	out := new(MsgUpdateAllPoolTradingFeesResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Msg/HandleUpdateAllPoolTradingFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateMarket(context.Context, *MsgCreateMarket) (*MsgCreateMarketResponse, error)
	UpdateMarket(context.Context, *MsgUpdateMarket) (*MsgUpdateMarketResponse, error)
	UpdatePerpetualsFundingInterval(context.Context, *MsgUpdatePerpetualsFundingInterval) (*MsgUpdatePerpetualsFundingIntervalResponse, error)
	DisableSpotMarket(context.Context, *MsgDisableSpotMarket) (*MsgDisableSpotMarketResponse, error)
	AddFeeTier(context.Context, *MsgAddFeeTier) (*MsgAddFeeTierResponse, error)
	UpdateFeeTier(context.Context, *MsgUpdateFeeTier) (*MsgUpdateFeeTierResponse, error)
	RemoveFeeTier(context.Context, *MsgRemoveFeeTier) (*MsgRemoveFeeTierResponse, error)
	SetStakeEquivalence(context.Context, *MsgSetStakeEquivalence) (*MsgSetStakeEquivalenceResponse, error)
	HandleUpdateAllPoolTradingFees(context.Context, *MsgUpdateAllPoolTradingFees) (*MsgUpdateAllPoolTradingFeesResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateMarket(ctx context.Context, req *MsgCreateMarket) (*MsgCreateMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMarket not implemented")
}
func (*UnimplementedMsgServer) UpdateMarket(ctx context.Context, req *MsgUpdateMarket) (*MsgUpdateMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMarket not implemented")
}
func (*UnimplementedMsgServer) UpdatePerpetualsFundingInterval(ctx context.Context, req *MsgUpdatePerpetualsFundingInterval) (*MsgUpdatePerpetualsFundingIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerpetualsFundingInterval not implemented")
}
func (*UnimplementedMsgServer) DisableSpotMarket(ctx context.Context, req *MsgDisableSpotMarket) (*MsgDisableSpotMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableSpotMarket not implemented")
}
func (*UnimplementedMsgServer) AddFeeTier(ctx context.Context, req *MsgAddFeeTier) (*MsgAddFeeTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeeTier not implemented")
}
func (*UnimplementedMsgServer) UpdateFeeTier(ctx context.Context, req *MsgUpdateFeeTier) (*MsgUpdateFeeTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeeTier not implemented")
}
func (*UnimplementedMsgServer) RemoveFeeTier(ctx context.Context, req *MsgRemoveFeeTier) (*MsgRemoveFeeTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFeeTier not implemented")
}
func (*UnimplementedMsgServer) SetStakeEquivalence(ctx context.Context, req *MsgSetStakeEquivalence) (*MsgSetStakeEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStakeEquivalence not implemented")
}
func (*UnimplementedMsgServer) HandleUpdateAllPoolTradingFees(ctx context.Context, req *MsgUpdateAllPoolTradingFees) (*MsgUpdateAllPoolTradingFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUpdateAllPoolTradingFees not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMarket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Msg/CreateMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMarket(ctx, req.(*MsgCreateMarket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMarket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Msg/UpdateMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMarket(ctx, req.(*MsgUpdateMarket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePerpetualsFundingInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePerpetualsFundingInterval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePerpetualsFundingInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Msg/UpdatePerpetualsFundingInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePerpetualsFundingInterval(ctx, req.(*MsgUpdatePerpetualsFundingInterval))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DisableSpotMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDisableSpotMarket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DisableSpotMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Msg/DisableSpotMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DisableSpotMarket(ctx, req.(*MsgDisableSpotMarket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddFeeTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddFeeTier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddFeeTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Msg/AddFeeTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddFeeTier(ctx, req.(*MsgAddFeeTier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateFeeTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateFeeTier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateFeeTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Msg/UpdateFeeTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateFeeTier(ctx, req.(*MsgUpdateFeeTier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveFeeTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveFeeTier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveFeeTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Msg/RemoveFeeTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveFeeTier(ctx, req.(*MsgRemoveFeeTier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetStakeEquivalence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetStakeEquivalence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetStakeEquivalence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Msg/SetStakeEquivalence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetStakeEquivalence(ctx, req.(*MsgSetStakeEquivalence))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleUpdateAllPoolTradingFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAllPoolTradingFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleUpdateAllPoolTradingFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Msg/HandleUpdateAllPoolTradingFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleUpdateAllPoolTradingFees(ctx, req.(*MsgUpdateAllPoolTradingFees))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Switcheo.carbon.market.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMarket",
			Handler:    _Msg_CreateMarket_Handler,
		},
		{
			MethodName: "UpdateMarket",
			Handler:    _Msg_UpdateMarket_Handler,
		},
		{
			MethodName: "UpdatePerpetualsFundingInterval",
			Handler:    _Msg_UpdatePerpetualsFundingInterval_Handler,
		},
		{
			MethodName: "DisableSpotMarket",
			Handler:    _Msg_DisableSpotMarket_Handler,
		},
		{
			MethodName: "AddFeeTier",
			Handler:    _Msg_AddFeeTier_Handler,
		},
		{
			MethodName: "UpdateFeeTier",
			Handler:    _Msg_UpdateFeeTier_Handler,
		},
		{
			MethodName: "RemoveFeeTier",
			Handler:    _Msg_RemoveFeeTier_Handler,
		},
		{
			MethodName: "SetStakeEquivalence",
			Handler:    _Msg_SetStakeEquivalence_Handler,
		},
		{
			MethodName: "HandleUpdateAllPoolTradingFees",
			Handler:    _Msg_HandleUpdateAllPoolTradingFees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "market/tx.proto",
}

func (m *MsgDisableSpotMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableSpotMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableSpotMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketName) > 0 {
		i -= len(m.MarketName)
		copy(dAtA[i:], m.MarketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MarketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDisableSpotMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableSpotMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableSpotMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpiryTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpiryTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x5a
	if len(m.IndexOracleId) > 0 {
		i -= len(m.IndexOracleId)
		copy(dAtA[i:], m.IndexOracleId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IndexOracleId)))
		i--
		dAtA[i] = 0x52
	}
	{
		size := m.CurrentQuotePriceUsd.Size()
		i -= size
		if _, err := m.CurrentQuotePriceUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.CurrentBasePriceUsd.Size()
		i -= size
		if _, err := m.CurrentBasePriceUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Quote) > 0 {
		i -= len(m.Quote)
		copy(dAtA[i:], m.Quote)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Quote)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Base) > 0 {
		i -= len(m.Base)
		copy(dAtA[i:], m.Base)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Base)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MarketType) > 0 {
		i -= len(m.MarketType)
		copy(dAtA[i:], m.MarketType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MarketType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MarketParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Updater) > 0 {
		i -= len(m.Updater)
		copy(dAtA[i:], m.Updater)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Updater)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePerpetualsFundingInterval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePerpetualsFundingInterval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePerpetualsFundingInterval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.PerpetualsFundingInterval, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.PerpetualsFundingInterval):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTx(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x12
	if len(m.Updater) > 0 {
		i -= len(m.Updater)
		copy(dAtA[i:], m.Updater)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Updater)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePerpetualsFundingIntervalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePerpetualsFundingIntervalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePerpetualsFundingIntervalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddFeeTier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddFeeTier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddFeeTier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeTier.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.FeeCategory.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddFeeTierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddFeeTierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddFeeTierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeTiers) > 0 {
		for iNdEx := len(m.FeeTiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeTiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateFeeTier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFeeTier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFeeTier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MakerFee != nil {
		{
			size := m.MakerFee.Size()
			i -= size
			if _, err := m.MakerFee.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TakerFee != nil {
		{
			size := m.TakerFee.Size()
			i -= size
			if _, err := m.TakerFee.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.RequiredStake.Size()
		i -= size
		if _, err := m.RequiredStake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.FeeCategory.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Updater) > 0 {
		i -= len(m.Updater)
		copy(dAtA[i:], m.Updater)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Updater)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateFeeTierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFeeTierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFeeTierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeTiers) > 0 {
		for iNdEx := len(m.FeeTiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeTiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveFeeTier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveFeeTier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveFeeTier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RequiredStake.Size()
		i -= size
		if _, err := m.RequiredStake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.FeeCategory.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Remover) > 0 {
		i -= len(m.Remover)
		copy(dAtA[i:], m.Remover)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Remover)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveFeeTierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveFeeTierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveFeeTierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeTiers) > 0 {
		for iNdEx := len(m.FeeTiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeTiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetStakeEquivalence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetStakeEquivalence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetStakeEquivalence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StakeEquivalence.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Setter) > 0 {
		i -= len(m.Setter)
		copy(dAtA[i:], m.Setter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Setter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetStakeEquivalenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetStakeEquivalenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetStakeEquivalenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakeEquivalences) > 0 {
		for iNdEx := len(m.StakeEquivalences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakeEquivalences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAllPoolTradingFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAllPoolTradingFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAllPoolTradingFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UpdatePoolTradingFeesParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAllPoolTradingFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAllPoolTradingFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAllPoolTradingFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateAllPoolTradingFeesParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAllPoolTradingFeesParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAllPoolTradingFeesParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TakerFee.Size()
		i -= size
		if _, err := m.TakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MakerFee.Size()
		i -= size
		if _, err := m.MakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MarketType) > 0 {
		i -= len(m.MarketType)
		copy(dAtA[i:], m.MarketType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MarketType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDisableSpotMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MarketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDisableSpotMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MarketType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Base)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Quote)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.CurrentBasePriceUsd.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.CurrentQuotePriceUsd.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.IndexOracleId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpiryTime)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreateMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Updater)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MarketParams.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdatePerpetualsFundingInterval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Updater)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.PerpetualsFundingInterval)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdatePerpetualsFundingIntervalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddFeeTier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.FeeCategory.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.FeeTier.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddFeeTierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeTiers) > 0 {
		for _, e := range m.FeeTiers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateFeeTier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Updater)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.FeeCategory.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.RequiredStake.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.TakerFee != nil {
		l = m.TakerFee.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MakerFee != nil {
		l = m.MakerFee.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateFeeTierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeTiers) > 0 {
		for _, e := range m.FeeTiers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRemoveFeeTier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Remover)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.FeeCategory.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.RequiredStake.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRemoveFeeTierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeTiers) > 0 {
		for _, e := range m.FeeTiers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetStakeEquivalence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Setter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.StakeEquivalence.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetStakeEquivalenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakeEquivalences) > 0 {
		for _, e := range m.StakeEquivalences {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateAllPoolTradingFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.UpdatePoolTradingFeesParams.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateAllPoolTradingFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateAllPoolTradingFeesParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MakerFee.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.TakerFee.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDisableSpotMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableSpotMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableSpotMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisableSpotMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableSpotMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableSpotMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBasePriceUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentBasePriceUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentQuotePriceUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentQuotePriceUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexOracleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexOracleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpiryTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updater", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updater = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarketParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePerpetualsFundingInterval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePerpetualsFundingInterval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePerpetualsFundingInterval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updater", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updater = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualsFundingInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.PerpetualsFundingInterval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePerpetualsFundingIntervalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePerpetualsFundingIntervalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePerpetualsFundingIntervalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddFeeTier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddFeeTier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddFeeTier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeTier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddFeeTierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddFeeTierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddFeeTierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeTiers = append(m.FeeTiers, FeeTier{})
			if err := m.FeeTiers[len(m.FeeTiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateFeeTier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFeeTier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFeeTier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updater", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updater = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequiredStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.TakerFee = &v
			if err := m.TakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.MakerFee = &v
			if err := m.MakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateFeeTierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFeeTierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFeeTierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeTiers = append(m.FeeTiers, FeeTier{})
			if err := m.FeeTiers[len(m.FeeTiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveFeeTier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveFeeTier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveFeeTier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequiredStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveFeeTierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveFeeTierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveFeeTierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeTiers = append(m.FeeTiers, FeeTier{})
			if err := m.FeeTiers[len(m.FeeTiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetStakeEquivalence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetStakeEquivalence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetStakeEquivalence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Setter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeEquivalence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakeEquivalence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetStakeEquivalenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetStakeEquivalenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetStakeEquivalenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeEquivalences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeEquivalences = append(m.StakeEquivalences, StakeEquivalence{})
			if err := m.StakeEquivalences[len(m.StakeEquivalences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAllPoolTradingFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAllPoolTradingFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAllPoolTradingFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePoolTradingFeesParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdatePoolTradingFeesParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAllPoolTradingFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAllPoolTradingFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAllPoolTradingFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAllPoolTradingFeesParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAllPoolTradingFeesParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAllPoolTradingFeesParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
