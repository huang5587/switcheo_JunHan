// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetMarketRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryGetMarketRequest) Reset()         { *m = QueryGetMarketRequest{} }
func (m *QueryGetMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMarketRequest) ProtoMessage()    {}
func (*QueryGetMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{0}
}
func (m *QueryGetMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMarketRequest.Merge(m, src)
}
func (m *QueryGetMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMarketRequest proto.InternalMessageInfo

type QueryGetMarketResponse struct {
	Market Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market"`
}

func (m *QueryGetMarketResponse) Reset()         { *m = QueryGetMarketResponse{} }
func (m *QueryGetMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMarketResponse) ProtoMessage()    {}
func (*QueryGetMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{1}
}
func (m *QueryGetMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMarketResponse.Merge(m, src)
}
func (m *QueryGetMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMarketResponse proto.InternalMessageInfo

type QueryAllMarketRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMarketRequest) Reset()         { *m = QueryAllMarketRequest{} }
func (m *QueryAllMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMarketRequest) ProtoMessage()    {}
func (*QueryAllMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{2}
}
func (m *QueryAllMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMarketRequest.Merge(m, src)
}
func (m *QueryAllMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMarketRequest proto.InternalMessageInfo

type QueryAllMarketResponse struct {
	Markets    []Market            `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMarketResponse) Reset()         { *m = QueryAllMarketResponse{} }
func (m *QueryAllMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMarketResponse) ProtoMessage()    {}
func (*QueryAllMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{3}
}
func (m *QueryAllMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMarketResponse.Merge(m, src)
}
func (m *QueryAllMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMarketResponse proto.InternalMessageInfo

type QueryGetTradingFeesRequest struct {
	MarketName  string `protobuf:"bytes,1,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`
	UserAddress string `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
}

func (m *QueryGetTradingFeesRequest) Reset()         { *m = QueryGetTradingFeesRequest{} }
func (m *QueryGetTradingFeesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradingFeesRequest) ProtoMessage()    {}
func (*QueryGetTradingFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{4}
}
func (m *QueryGetTradingFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTradingFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradingFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTradingFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradingFeesRequest.Merge(m, src)
}
func (m *QueryGetTradingFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTradingFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradingFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradingFeesRequest proto.InternalMessageInfo

type QueryGetTradingFeesResponse struct {
	Fees TradingFees `protobuf:"bytes,1,opt,name=fees,proto3" json:"fees"`
}

func (m *QueryGetTradingFeesResponse) Reset()         { *m = QueryGetTradingFeesResponse{} }
func (m *QueryGetTradingFeesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradingFeesResponse) ProtoMessage()    {}
func (*QueryGetTradingFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{5}
}
func (m *QueryGetTradingFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTradingFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradingFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTradingFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradingFeesResponse.Merge(m, src)
}
func (m *QueryGetTradingFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTradingFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradingFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradingFeesResponse proto.InternalMessageInfo

type QueryGetFeeTiersRequest struct {
	MarketType  string `protobuf:"bytes,1,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"`
	MarketName  string `protobuf:"bytes,2,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`
	UserAddress string `protobuf:"bytes,3,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
}

func (m *QueryGetFeeTiersRequest) Reset()         { *m = QueryGetFeeTiersRequest{} }
func (m *QueryGetFeeTiersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFeeTiersRequest) ProtoMessage()    {}
func (*QueryGetFeeTiersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{6}
}
func (m *QueryGetFeeTiersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeeTiersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeeTiersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeeTiersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeeTiersRequest.Merge(m, src)
}
func (m *QueryGetFeeTiersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeeTiersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeeTiersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeeTiersRequest proto.InternalMessageInfo

type QueryGetFeeTiersResponse struct {
	FeeTiers []FeeTier `protobuf:"bytes,1,rep,name=fee_tiers,json=feeTiers,proto3" json:"fee_tiers"`
}

func (m *QueryGetFeeTiersResponse) Reset()         { *m = QueryGetFeeTiersResponse{} }
func (m *QueryGetFeeTiersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFeeTiersResponse) ProtoMessage()    {}
func (*QueryGetFeeTiersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{7}
}
func (m *QueryGetFeeTiersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeeTiersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeeTiersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeeTiersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeeTiersResponse.Merge(m, src)
}
func (m *QueryGetFeeTiersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeeTiersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeeTiersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeeTiersResponse proto.InternalMessageInfo

type QueryAllStakeEquivalenceRequest struct {
}

func (m *QueryAllStakeEquivalenceRequest) Reset()         { *m = QueryAllStakeEquivalenceRequest{} }
func (m *QueryAllStakeEquivalenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakeEquivalenceRequest) ProtoMessage()    {}
func (*QueryAllStakeEquivalenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{8}
}
func (m *QueryAllStakeEquivalenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakeEquivalenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakeEquivalenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakeEquivalenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakeEquivalenceRequest.Merge(m, src)
}
func (m *QueryAllStakeEquivalenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakeEquivalenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakeEquivalenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakeEquivalenceRequest proto.InternalMessageInfo

type QueryAllStakeEquivalenceResponse struct {
	StakeEquivalence []StakeEquivalence `protobuf:"bytes,1,rep,name=stake_equivalence,json=stakeEquivalence,proto3" json:"stake_equivalence"`
}

func (m *QueryAllStakeEquivalenceResponse) Reset()         { *m = QueryAllStakeEquivalenceResponse{} }
func (m *QueryAllStakeEquivalenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakeEquivalenceResponse) ProtoMessage()    {}
func (*QueryAllStakeEquivalenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{9}
}
func (m *QueryAllStakeEquivalenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakeEquivalenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakeEquivalenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakeEquivalenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakeEquivalenceResponse.Merge(m, src)
}
func (m *QueryAllStakeEquivalenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakeEquivalenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakeEquivalenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakeEquivalenceResponse proto.InternalMessageInfo

type QueryAllFeeStructuresRequest struct {
}

func (m *QueryAllFeeStructuresRequest) Reset()         { *m = QueryAllFeeStructuresRequest{} }
func (m *QueryAllFeeStructuresRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFeeStructuresRequest) ProtoMessage()    {}
func (*QueryAllFeeStructuresRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{10}
}
func (m *QueryAllFeeStructuresRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFeeStructuresRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFeeStructuresRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFeeStructuresRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFeeStructuresRequest.Merge(m, src)
}
func (m *QueryAllFeeStructuresRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFeeStructuresRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFeeStructuresRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFeeStructuresRequest proto.InternalMessageInfo

type QueryAllFeeStructuresResponse struct {
	FeeStructures []FeeStructure `protobuf:"bytes,1,rep,name=fee_structures,json=feeStructures,proto3" json:"fee_structures"`
}

func (m *QueryAllFeeStructuresResponse) Reset()         { *m = QueryAllFeeStructuresResponse{} }
func (m *QueryAllFeeStructuresResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFeeStructuresResponse) ProtoMessage()    {}
func (*QueryAllFeeStructuresResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{11}
}
func (m *QueryAllFeeStructuresResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFeeStructuresResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFeeStructuresResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFeeStructuresResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFeeStructuresResponse.Merge(m, src)
}
func (m *QueryAllFeeStructuresResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFeeStructuresResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFeeStructuresResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFeeStructuresResponse proto.InternalMessageInfo

type QueryUserFeeStructuresRequest struct {
	UserAddress string `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
}

func (m *QueryUserFeeStructuresRequest) Reset()         { *m = QueryUserFeeStructuresRequest{} }
func (m *QueryUserFeeStructuresRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserFeeStructuresRequest) ProtoMessage()    {}
func (*QueryUserFeeStructuresRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{12}
}
func (m *QueryUserFeeStructuresRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserFeeStructuresRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserFeeStructuresRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserFeeStructuresRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserFeeStructuresRequest.Merge(m, src)
}
func (m *QueryUserFeeStructuresRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserFeeStructuresRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserFeeStructuresRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserFeeStructuresRequest proto.InternalMessageInfo

type QueryUserFeeStructuresResponse struct {
	FeeStructures []FeeStructure `protobuf:"bytes,1,rep,name=fee_structures,json=feeStructures,proto3" json:"fee_structures"`
}

func (m *QueryUserFeeStructuresResponse) Reset()         { *m = QueryUserFeeStructuresResponse{} }
func (m *QueryUserFeeStructuresResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserFeeStructuresResponse) ProtoMessage()    {}
func (*QueryUserFeeStructuresResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{13}
}
func (m *QueryUserFeeStructuresResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserFeeStructuresResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserFeeStructuresResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserFeeStructuresResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserFeeStructuresResponse.Merge(m, src)
}
func (m *QueryUserFeeStructuresResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserFeeStructuresResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserFeeStructuresResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserFeeStructuresResponse proto.InternalMessageInfo

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{14}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{15}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

// QueryControlledParamsRequest is request type for the Query/ControlledParams RPC method.
type QueryControlledParamsRequest struct {
}

func (m *QueryControlledParamsRequest) Reset()         { *m = QueryControlledParamsRequest{} }
func (m *QueryControlledParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryControlledParamsRequest) ProtoMessage()    {}
func (*QueryControlledParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{16}
}
func (m *QueryControlledParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryControlledParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryControlledParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryControlledParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryControlledParamsRequest.Merge(m, src)
}
func (m *QueryControlledParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryControlledParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryControlledParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryControlledParamsRequest proto.InternalMessageInfo

// QueryControlledParamsResponse is response type for the Query/ControlledParams RPC method.
type QueryControlledParamsResponse struct {
	// params holds all the parameters of this module.
	ControlledParams ControlledParams `protobuf:"bytes,1,opt,name=controlled_params,json=controlledParams,proto3" json:"controlled_params"`
}

func (m *QueryControlledParamsResponse) Reset()         { *m = QueryControlledParamsResponse{} }
func (m *QueryControlledParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryControlledParamsResponse) ProtoMessage()    {}
func (*QueryControlledParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc4839d34748ebb1, []int{17}
}
func (m *QueryControlledParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryControlledParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryControlledParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryControlledParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryControlledParamsResponse.Merge(m, src)
}
func (m *QueryControlledParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryControlledParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryControlledParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryControlledParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryGetMarketRequest)(nil), "Switcheo.carbon.market.QueryGetMarketRequest")
	proto.RegisterType((*QueryGetMarketResponse)(nil), "Switcheo.carbon.market.QueryGetMarketResponse")
	proto.RegisterType((*QueryAllMarketRequest)(nil), "Switcheo.carbon.market.QueryAllMarketRequest")
	proto.RegisterType((*QueryAllMarketResponse)(nil), "Switcheo.carbon.market.QueryAllMarketResponse")
	proto.RegisterType((*QueryGetTradingFeesRequest)(nil), "Switcheo.carbon.market.QueryGetTradingFeesRequest")
	proto.RegisterType((*QueryGetTradingFeesResponse)(nil), "Switcheo.carbon.market.QueryGetTradingFeesResponse")
	proto.RegisterType((*QueryGetFeeTiersRequest)(nil), "Switcheo.carbon.market.QueryGetFeeTiersRequest")
	proto.RegisterType((*QueryGetFeeTiersResponse)(nil), "Switcheo.carbon.market.QueryGetFeeTiersResponse")
	proto.RegisterType((*QueryAllStakeEquivalenceRequest)(nil), "Switcheo.carbon.market.QueryAllStakeEquivalenceRequest")
	proto.RegisterType((*QueryAllStakeEquivalenceResponse)(nil), "Switcheo.carbon.market.QueryAllStakeEquivalenceResponse")
	proto.RegisterType((*QueryAllFeeStructuresRequest)(nil), "Switcheo.carbon.market.QueryAllFeeStructuresRequest")
	proto.RegisterType((*QueryAllFeeStructuresResponse)(nil), "Switcheo.carbon.market.QueryAllFeeStructuresResponse")
	proto.RegisterType((*QueryUserFeeStructuresRequest)(nil), "Switcheo.carbon.market.QueryUserFeeStructuresRequest")
	proto.RegisterType((*QueryUserFeeStructuresResponse)(nil), "Switcheo.carbon.market.QueryUserFeeStructuresResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "Switcheo.carbon.market.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "Switcheo.carbon.market.QueryParamsResponse")
	proto.RegisterType((*QueryControlledParamsRequest)(nil), "Switcheo.carbon.market.QueryControlledParamsRequest")
	proto.RegisterType((*QueryControlledParamsResponse)(nil), "Switcheo.carbon.market.QueryControlledParamsResponse")
}

func init() { proto.RegisterFile("market/query.proto", fileDescriptor_dc4839d34748ebb1) }

var fileDescriptor_dc4839d34748ebb1 = []byte{
	// 970 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x33, 0xdd, 0x52, 0xb6, 0x2f, 0x80, 0xba, 0xd3, 0xa5, 0x04, 0x77, 0xd7, 0x4d, 0x5d,
	0x7e, 0x94, 0xad, 0xd6, 0xa6, 0x5d, 0x60, 0x39, 0x00, 0x52, 0x8b, 0x68, 0x4f, 0xa0, 0xdd, 0xb4,
	0x70, 0x00, 0x44, 0x98, 0xa4, 0x2f, 0xd9, 0x68, 0x1d, 0x3b, 0xf5, 0x38, 0x85, 0x6a, 0x59, 0x90,
	0xe0, 0x8c, 0xc4, 0x0f, 0x89, 0x3b, 0x47, 0x24, 0x0e, 0x5c, 0x38, 0xf1, 0x0f, 0xf4, 0x58, 0x89,
	0x0b, 0x27, 0x04, 0x2d, 0x7f, 0x08, 0xf2, 0xcc, 0x73, 0x12, 0xdb, 0x71, 0xdd, 0x1c, 0xf6, 0x54,
	0xeb, 0xcd, 0xfb, 0xf1, 0x79, 0xef, 0x4d, 0xbf, 0xd3, 0x02, 0xef, 0x8a, 0xe0, 0x3e, 0x86, 0xce,
	0x41, 0x1f, 0x83, 0x23, 0xbb, 0x17, 0xf8, 0xa1, 0xcf, 0x17, 0x76, 0x3f, 0xeb, 0x84, 0xcd, 0x7b,
	0xe8, 0xdb, 0x4d, 0x11, 0x34, 0x7c, 0xcf, 0xd6, 0x3e, 0xc6, 0xb5, 0xb6, 0xef, 0xb7, 0x5d, 0x74,
	0x44, 0xaf, 0xe3, 0x08, 0xcf, 0xf3, 0x43, 0x11, 0x76, 0x7c, 0x4f, 0xea, 0x28, 0xe3, 0x46, 0xd3,
	0x97, 0x5d, 0x5f, 0x3a, 0x0d, 0x21, 0x51, 0xa7, 0x73, 0x0e, 0xd7, 0x1b, 0x18, 0x8a, 0x75, 0xa7,
	0x27, 0xda, 0x1d, 0x4f, 0x39, 0x93, 0xef, 0xd5, 0xb6, 0xdf, 0xf6, 0xd5, 0xa7, 0x13, 0x7d, 0x91,
	0x75, 0x9e, 0x58, 0xf4, 0x0f, 0x32, 0xce, 0x91, 0xb1, 0x85, 0xa8, 0x2d, 0xd6, 0x1a, 0x3c, 0x7d,
	0x37, 0x4a, 0xbf, 0x83, 0xe1, 0xbb, 0xea, 0xac, 0x86, 0x07, 0x7d, 0x94, 0x21, 0xe7, 0x30, 0xed,
	0x89, 0x2e, 0x56, 0x58, 0x95, 0xad, 0xce, 0xd6, 0xd4, 0xb7, 0xf5, 0x01, 0x2c, 0xa4, 0x9d, 0x65,
	0xcf, 0xf7, 0x24, 0xf2, 0x37, 0x60, 0x46, 0xa7, 0x56, 0xfe, 0xe5, 0x0d, 0xd3, 0x1e, 0xdf, 0xb6,
	0xad, 0xe3, 0xb6, 0xa6, 0x8f, 0xff, 0x5e, 0x2a, 0xd5, 0x28, 0xc6, 0xaa, 0x13, 0xc4, 0xa6, 0xeb,
	0x26, 0x21, 0xb6, 0x01, 0x86, 0xed, 0x52, 0xea, 0x17, 0x6c, 0x3d, 0x1b, 0x3b, 0x9a, 0x8d, 0xad,
	0x47, 0x4d, 0xb3, 0xb1, 0xef, 0x88, 0x36, 0x52, 0x6c, 0x6d, 0x24, 0xd2, 0xfa, 0x99, 0x11, 0xf9,
	0x48, 0x05, 0x22, 0x7f, 0x0b, 0x1e, 0xd7, 0x14, 0xb2, 0xc2, 0xaa, 0x97, 0x2e, 0x8c, 0x1e, 0x07,
	0xf1, 0x9d, 0x04, 0xe2, 0x94, 0x42, 0x7c, 0xb1, 0x10, 0x51, 0x17, 0x4f, 0x30, 0x7e, 0x0a, 0x46,
	0x3c, 0xdc, 0xbd, 0x40, 0xec, 0x77, 0xbc, 0xf6, 0x36, 0xa2, 0x8c, 0x27, 0xb1, 0x04, 0x65, 0x5d,
	0xb1, 0x3e, 0xb2, 0x15, 0xd0, 0xa6, 0xf7, 0x44, 0x17, 0xf9, 0x32, 0x3c, 0xd1, 0x97, 0x18, 0xd4,
	0xc5, 0xfe, 0x7e, 0x80, 0x52, 0x2a, 0x92, 0xd9, 0x5a, 0x39, 0xb2, 0x6d, 0x6a, 0x93, 0xf5, 0x31,
	0x2c, 0x8e, 0xad, 0x40, 0x93, 0x78, 0x13, 0xa6, 0x5b, 0x88, 0x92, 0xc6, 0xbc, 0x92, 0x37, 0x86,
	0x91, 0x50, 0x9a, 0x85, 0x0a, 0xb3, 0xbe, 0x84, 0x67, 0xe2, 0xec, 0xdb, 0x88, 0x7b, 0x1d, 0x0c,
	0xc6, 0xc0, 0x87, 0x47, 0xbd, 0x14, 0xfc, 0xde, 0x51, 0x0f, 0xd3, 0xdd, 0x4d, 0x15, 0x76, 0x77,
	0x29, 0xdb, 0xdd, 0x27, 0x50, 0xc9, 0xd6, 0xa7, 0xd6, 0xb6, 0x60, 0xb6, 0x85, 0x58, 0x0f, 0x23,
	0x23, 0xad, 0x79, 0x29, 0xaf, 0x3f, 0x0a, 0xa6, 0xde, 0x2e, 0xb7, 0x28, 0x97, 0xb5, 0x0c, 0x4b,
	0xf1, 0x15, 0xda, 0x0d, 0xc5, 0x7d, 0x7c, 0xe7, 0xa0, 0xdf, 0x39, 0x14, 0x2e, 0x7a, 0xcd, 0xf8,
	0xca, 0x59, 0x5f, 0x41, 0x35, 0xdf, 0x85, 0x50, 0x3e, 0x82, 0x2b, 0x32, 0x3a, 0xab, 0xe3, 0xf0,
	0x90, 0x90, 0x56, 0xf3, 0x90, 0xd2, 0xc9, 0x88, 0x6d, 0x4e, 0xa6, 0xec, 0x96, 0x09, 0xd7, 0x62,
	0x80, 0x6d, 0xc4, 0xdd, 0x30, 0xe8, 0x37, 0xc3, 0x7e, 0x30, 0xb8, 0x45, 0x56, 0x00, 0xd7, 0x73,
	0xce, 0x89, 0xee, 0x2e, 0x3c, 0x15, 0x0d, 0x4a, 0x0e, 0x4e, 0x08, 0xed, 0xb9, 0x73, 0xa6, 0x35,
	0x48, 0x43, 0x58, 0x4f, 0xb6, 0x46, 0x53, 0x5b, 0x5b, 0x54, 0xf3, 0x7d, 0x89, 0xc1, 0x38, 0xa8,
	0xcc, 0x6e, 0x59, 0x76, 0xb7, 0x12, 0xcc, 0xbc, 0x1c, 0x8f, 0x0e, 0xfc, 0x2a, 0x70, 0x55, 0xf4,
	0x8e, 0x08, 0x44, 0x77, 0x30, 0xc2, 0x5d, 0x98, 0x4f, 0x58, 0x87, 0x02, 0xd8, 0x53, 0x96, 0x22,
	0x01, 0xd4, 0x71, 0xb1, 0x00, 0xea, 0x98, 0xc1, 0xde, 0xde, 0xf6, 0xbd, 0x30, 0xf0, 0x5d, 0x17,
	0xf7, 0x93, 0x45, 0xbf, 0xa0, 0x19, 0x66, 0xcf, 0x87, 0xb7, 0xaa, 0x39, 0x38, 0xab, 0x27, 0x48,
	0x72, 0x6f, 0x55, 0x3a, 0x59, 0x7c, 0xab, 0x9a, 0x29, 0xfb, 0xc6, 0x6f, 0x65, 0x78, 0x4c, 0x95,
	0xe7, 0xdf, 0x33, 0x98, 0xd1, 0x32, 0xc8, 0x6f, 0xe6, 0xa5, 0x1d, 0xfb, 0x9c, 0x18, 0xf6, 0x45,
	0xdd, 0x75, 0x43, 0xd6, 0xea, 0xd7, 0x7f, 0xfe, 0xf7, 0xe3, 0x94, 0xc5, 0xab, 0x8e, 0x76, 0xa7,
	0x77, 0xcc, 0x39, 0x5c, 0xa7, 0x2f, 0xe9, 0x3c, 0x88, 0xb4, 0xe2, 0x21, 0xff, 0x96, 0xc1, 0xac,
	0x0e, 0xde, 0x74, 0xdd, 0x02, 0xac, 0xf4, 0x03, 0x53, 0x80, 0x95, 0x79, 0x2d, 0xac, 0x65, 0x85,
	0xb5, 0xc8, 0x9f, 0xcd, 0xc5, 0xe2, 0x3f, 0x31, 0x28, 0x8f, 0x68, 0x24, 0xdf, 0x28, 0xea, 0x3c,
	0xab, 0xf6, 0xc6, 0xad, 0x89, 0x62, 0x88, 0xcd, 0x54, 0x6c, 0x15, 0xbe, 0x90, 0x65, 0x8b, 0x04,
	0x9a, 0xff, 0xc0, 0xe0, 0x72, 0xac, 0x8c, 0xdc, 0x29, 0xaa, 0x90, 0xd2, 0x70, 0xe3, 0xe5, 0x8b,
	0x07, 0x10, 0xcf, 0x8a, 0xe2, 0xb9, 0xce, 0x17, 0xc7, 0xf2, 0x68, 0x31, 0xe6, 0xbf, 0x33, 0x98,
	0x4f, 0xcb, 0x5b, 0xb4, 0xc7, 0xdb, 0x45, 0x8b, 0xc9, 0xd1, 0x60, 0xe3, 0xf5, 0xc9, 0x03, 0x89,
	0x77, 0x4d, 0xf1, 0x3e, 0xcf, 0x57, 0xb2, 0xbc, 0x19, 0xc5, 0xe6, 0xbf, 0x30, 0x98, 0x4b, 0x28,
	0x51, 0x04, 0xfd, 0x4a, 0x51, 0xed, 0x71, 0xfa, 0x67, 0xbc, 0x3a, 0x61, 0x54, 0xf1, 0x6f, 0x48,
	0x52, 0x09, 0xf9, 0x1f, 0x0c, 0xae, 0x64, 0x94, 0x93, 0x9f, 0x5f, 0x36, 0x4f, 0xad, 0x8d, 0xd7,
	0x26, 0x0d, 0x23, 0xdc, 0xdb, 0x0a, 0x77, 0x9d, 0x3b, 0x45, 0xb8, 0xce, 0x83, 0xd1, 0xd7, 0xe0,
	0x21, 0xff, 0x86, 0xc1, 0x8c, 0x16, 0x22, 0x7e, 0xe3, 0xdc, 0xda, 0x09, 0xc9, 0x34, 0xd6, 0x2e,
	0xe4, 0x4b, 0x70, 0x55, 0x05, 0x67, 0xf0, 0x4a, 0x16, 0x4e, 0x6b, 0x29, 0xff, 0x95, 0xc1, 0x5c,
	0x5a, 0x30, 0x0b, 0xf6, 0x9d, 0x23, 0xe6, 0x05, 0xfb, 0xce, 0x93, 0xf8, 0xf3, 0xae, 0xe7, 0x50,
	0xb1, 0x6f, 0x6a, 0xdc, 0xad, 0x9d, 0xe3, 0x7f, 0xcd, 0xd2, 0xf1, 0xa9, 0xc9, 0x4e, 0x4e, 0x4d,
	0xf6, 0xcf, 0xa9, 0xc9, 0xbe, 0x3b, 0x33, 0x4b, 0x27, 0x67, 0x66, 0xe9, 0xaf, 0x33, 0xb3, 0xf4,
	0xe1, 0x4b, 0xed, 0x4e, 0x78, 0xaf, 0xdf, 0xb0, 0x9b, 0x7e, 0xd7, 0x89, 0x59, 0xe2, 0xac, 0x9f,
	0xc7, 0x79, 0xa3, 0x3f, 0xd5, 0x64, 0x63, 0x46, 0xfd, 0x9b, 0x70, 0xeb, 0xff, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xca, 0x43, 0x02, 0xf4, 0xdb, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Get details for a market
	Market(ctx context.Context, in *QueryGetMarketRequest, opts ...grpc.CallOption) (*QueryGetMarketResponse, error)
	// Get details for all markets
	MarketAll(ctx context.Context, in *QueryAllMarketRequest, opts ...grpc.CallOption) (*QueryAllMarketResponse, error)
	// Get the trading fees for market and user
	TradingFees(ctx context.Context, in *QueryGetTradingFeesRequest, opts ...grpc.CallOption) (*QueryGetTradingFeesResponse, error)
	// Get Fee structure of the market
	FeeTiers(ctx context.Context, in *QueryGetFeeTiersRequest, opts ...grpc.CallOption) (*QueryGetFeeTiersResponse, error)
	// Get all stake equivalences as an array
	StakeEquivalenceAll(ctx context.Context, in *QueryAllStakeEquivalenceRequest, opts ...grpc.CallOption) (*QueryAllStakeEquivalenceResponse, error)
	FeeStructuresAll(ctx context.Context, in *QueryAllFeeStructuresRequest, opts ...grpc.CallOption) (*QueryAllFeeStructuresResponse, error)
	UserFeeStructures(ctx context.Context, in *QueryUserFeeStructuresRequest, opts ...grpc.CallOption) (*QueryUserFeeStructuresResponse, error)
	// Parameters queries the staking parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Get the controlled parameters for all markets
	ControlledParams(ctx context.Context, in *QueryControlledParamsRequest, opts ...grpc.CallOption) (*QueryControlledParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Market(ctx context.Context, in *QueryGetMarketRequest, opts ...grpc.CallOption) (*QueryGetMarketResponse, error) {
	out := new(QueryGetMarketResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Query/Market", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MarketAll(ctx context.Context, in *QueryAllMarketRequest, opts ...grpc.CallOption) (*QueryAllMarketResponse, error) {
	out := new(QueryAllMarketResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Query/MarketAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradingFees(ctx context.Context, in *QueryGetTradingFeesRequest, opts ...grpc.CallOption) (*QueryGetTradingFeesResponse, error) {
	out := new(QueryGetTradingFeesResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Query/TradingFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeTiers(ctx context.Context, in *QueryGetFeeTiersRequest, opts ...grpc.CallOption) (*QueryGetFeeTiersResponse, error) {
	out := new(QueryGetFeeTiersResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Query/FeeTiers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakeEquivalenceAll(ctx context.Context, in *QueryAllStakeEquivalenceRequest, opts ...grpc.CallOption) (*QueryAllStakeEquivalenceResponse, error) {
	out := new(QueryAllStakeEquivalenceResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Query/StakeEquivalenceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeStructuresAll(ctx context.Context, in *QueryAllFeeStructuresRequest, opts ...grpc.CallOption) (*QueryAllFeeStructuresResponse, error) {
	out := new(QueryAllFeeStructuresResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Query/FeeStructuresAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserFeeStructures(ctx context.Context, in *QueryUserFeeStructuresRequest, opts ...grpc.CallOption) (*QueryUserFeeStructuresResponse, error) {
	out := new(QueryUserFeeStructuresResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Query/UserFeeStructures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ControlledParams(ctx context.Context, in *QueryControlledParamsRequest, opts ...grpc.CallOption) (*QueryControlledParamsResponse, error) {
	out := new(QueryControlledParamsResponse)
	err := c.cc.Invoke(ctx, "/Switcheo.carbon.market.Query/ControlledParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Get details for a market
	Market(context.Context, *QueryGetMarketRequest) (*QueryGetMarketResponse, error)
	// Get details for all markets
	MarketAll(context.Context, *QueryAllMarketRequest) (*QueryAllMarketResponse, error)
	// Get the trading fees for market and user
	TradingFees(context.Context, *QueryGetTradingFeesRequest) (*QueryGetTradingFeesResponse, error)
	// Get Fee structure of the market
	FeeTiers(context.Context, *QueryGetFeeTiersRequest) (*QueryGetFeeTiersResponse, error)
	// Get all stake equivalences as an array
	StakeEquivalenceAll(context.Context, *QueryAllStakeEquivalenceRequest) (*QueryAllStakeEquivalenceResponse, error)
	FeeStructuresAll(context.Context, *QueryAllFeeStructuresRequest) (*QueryAllFeeStructuresResponse, error)
	UserFeeStructures(context.Context, *QueryUserFeeStructuresRequest) (*QueryUserFeeStructuresResponse, error)
	// Parameters queries the staking parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Get the controlled parameters for all markets
	ControlledParams(context.Context, *QueryControlledParamsRequest) (*QueryControlledParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Market(ctx context.Context, req *QueryGetMarketRequest) (*QueryGetMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Market not implemented")
}
func (*UnimplementedQueryServer) MarketAll(ctx context.Context, req *QueryAllMarketRequest) (*QueryAllMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketAll not implemented")
}
func (*UnimplementedQueryServer) TradingFees(ctx context.Context, req *QueryGetTradingFeesRequest) (*QueryGetTradingFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradingFees not implemented")
}
func (*UnimplementedQueryServer) FeeTiers(ctx context.Context, req *QueryGetFeeTiersRequest) (*QueryGetFeeTiersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeTiers not implemented")
}
func (*UnimplementedQueryServer) StakeEquivalenceAll(ctx context.Context, req *QueryAllStakeEquivalenceRequest) (*QueryAllStakeEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeEquivalenceAll not implemented")
}
func (*UnimplementedQueryServer) FeeStructuresAll(ctx context.Context, req *QueryAllFeeStructuresRequest) (*QueryAllFeeStructuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeStructuresAll not implemented")
}
func (*UnimplementedQueryServer) UserFeeStructures(ctx context.Context, req *QueryUserFeeStructuresRequest) (*QueryUserFeeStructuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFeeStructures not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ControlledParams(ctx context.Context, req *QueryControlledParamsRequest) (*QueryControlledParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlledParams not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Market_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Market(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Query/Market",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Market(ctx, req.(*QueryGetMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MarketAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Query/MarketAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketAll(ctx, req.(*QueryAllMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradingFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTradingFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradingFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Query/TradingFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradingFees(ctx, req.(*QueryGetTradingFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeTiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFeeTiersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeTiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Query/FeeTiers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeTiers(ctx, req.(*QueryGetFeeTiersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakeEquivalenceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStakeEquivalenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakeEquivalenceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Query/StakeEquivalenceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakeEquivalenceAll(ctx, req.(*QueryAllStakeEquivalenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeStructuresAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFeeStructuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeStructuresAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Query/FeeStructuresAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeStructuresAll(ctx, req.(*QueryAllFeeStructuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserFeeStructures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserFeeStructuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserFeeStructures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Query/UserFeeStructures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserFeeStructures(ctx, req.(*QueryUserFeeStructuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ControlledParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryControlledParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ControlledParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Switcheo.carbon.market.Query/ControlledParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ControlledParams(ctx, req.(*QueryControlledParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Switcheo.carbon.market.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Market",
			Handler:    _Query_Market_Handler,
		},
		{
			MethodName: "MarketAll",
			Handler:    _Query_MarketAll_Handler,
		},
		{
			MethodName: "TradingFees",
			Handler:    _Query_TradingFees_Handler,
		},
		{
			MethodName: "FeeTiers",
			Handler:    _Query_FeeTiers_Handler,
		},
		{
			MethodName: "StakeEquivalenceAll",
			Handler:    _Query_StakeEquivalenceAll_Handler,
		},
		{
			MethodName: "FeeStructuresAll",
			Handler:    _Query_FeeStructuresAll_Handler,
		},
		{
			MethodName: "UserFeeStructures",
			Handler:    _Query_UserFeeStructures_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ControlledParams",
			Handler:    _Query_ControlledParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "market/query.proto",
}

func (m *QueryGetMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Markets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTradingFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradingFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradingFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketName) > 0 {
		i -= len(m.MarketName)
		copy(dAtA[i:], m.MarketName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTradingFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradingFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradingFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Fees.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetFeeTiersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeeTiersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeeTiersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MarketName) > 0 {
		i -= len(m.MarketName)
		copy(dAtA[i:], m.MarketName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketType) > 0 {
		i -= len(m.MarketType)
		copy(dAtA[i:], m.MarketType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFeeTiersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeeTiersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeeTiersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeTiers) > 0 {
		for iNdEx := len(m.FeeTiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeTiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStakeEquivalenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakeEquivalenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakeEquivalenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllStakeEquivalenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakeEquivalenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakeEquivalenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakeEquivalence) > 0 {
		for iNdEx := len(m.StakeEquivalence) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakeEquivalence[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFeeStructuresRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFeeStructuresRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFeeStructuresRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllFeeStructuresResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFeeStructuresResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFeeStructuresResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeStructures) > 0 {
		for iNdEx := len(m.FeeStructures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeStructures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserFeeStructuresRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserFeeStructuresRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserFeeStructuresRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserFeeStructuresResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserFeeStructuresResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserFeeStructuresResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeStructures) > 0 {
		for iNdEx := len(m.FeeStructures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeStructures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryControlledParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryControlledParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryControlledParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryControlledParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryControlledParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryControlledParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ControlledParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Market.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for _, e := range m.Markets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTradingFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTradingFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Fees.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetFeeTiersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MarketName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFeeTiersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeTiers) > 0 {
		for _, e := range m.FeeTiers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllStakeEquivalenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllStakeEquivalenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakeEquivalence) > 0 {
		for _, e := range m.StakeEquivalence {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllFeeStructuresRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllFeeStructuresResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeStructures) > 0 {
		for _, e := range m.FeeStructures {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUserFeeStructuresRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserFeeStructuresResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeStructures) > 0 {
		for _, e := range m.FeeStructures {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryControlledParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryControlledParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ControlledParams.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, Market{})
			if err := m.Markets[len(m.Markets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTradingFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradingFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradingFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTradingFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradingFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradingFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeeTiersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeeTiersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeeTiersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeeTiersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeeTiersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeeTiersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeTiers = append(m.FeeTiers, FeeTier{})
			if err := m.FeeTiers[len(m.FeeTiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakeEquivalenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakeEquivalenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakeEquivalenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakeEquivalenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakeEquivalenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakeEquivalenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeEquivalence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeEquivalence = append(m.StakeEquivalence, StakeEquivalence{})
			if err := m.StakeEquivalence[len(m.StakeEquivalence)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFeeStructuresRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFeeStructuresRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFeeStructuresRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFeeStructuresResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFeeStructuresResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFeeStructuresResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeStructures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeStructures = append(m.FeeStructures, FeeStructure{})
			if err := m.FeeStructures[len(m.FeeStructures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserFeeStructuresRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserFeeStructuresRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserFeeStructuresRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserFeeStructuresResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserFeeStructuresResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserFeeStructuresResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeStructures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeStructures = append(m.FeeStructures, FeeStructure{})
			if err := m.FeeStructures[len(m.FeeStructures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryControlledParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryControlledParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryControlledParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryControlledParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryControlledParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryControlledParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlledParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ControlledParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
