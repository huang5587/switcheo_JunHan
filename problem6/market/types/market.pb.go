// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/market.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the market module.
type Params struct {
	DefaultLotSizeUsd                   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=default_lot_size_usd,json=defaultLotSizeUsd,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_lot_size_usd"`
	DefaultTickSizeUsd                  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=default_tick_size_usd,json=defaultTickSizeUsd,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_tick_size_usd"`
	DefaultMinQuantityUsd               github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=default_min_quantity_usd,json=defaultMinQuantityUsd,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_min_quantity_usd"`
	DefaultSpotMakerFee                 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=default_spot_maker_fee,json=defaultSpotMakerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_spot_maker_fee" db:"maker_fee"`          // Deprecated: Do not use.
	DefaultSpotTakerFee                 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=default_spot_taker_fee,json=defaultSpotTakerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_spot_taker_fee" db:"taker_fee"`          // Deprecated: Do not use.
	DefaultFuturesMakerFee              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=default_futures_maker_fee,json=defaultFuturesMakerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_futures_maker_fee" db:"maker_fee"` // Deprecated: Do not use.
	DefaultFuturesTakerFee              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=default_futures_taker_fee,json=defaultFuturesTakerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_futures_taker_fee" db:"taker_fee"` // Deprecated: Do not use.
	DefaultRiskStepSizeUsd              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=default_risk_step_size_usd,json=defaultRiskStepSizeUsd,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_risk_step_size_usd"`
	DefaultInitialMarginBase            github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=default_initial_margin_base,json=defaultInitialMarginBase,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_initial_margin_base"`
	DefaultInitialMarginStep            github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=default_initial_margin_step,json=defaultInitialMarginStep,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_initial_margin_step"`
	DefaultMaintenanceMarginRatio       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=default_maintenance_margin_ratio,json=defaultMaintenanceMarginRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_maintenance_margin_ratio"`
	DefaultMaxLiquidationOrderTicketUsd github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=default_max_liquidation_order_ticket_usd,json=defaultMaxLiquidationOrderTicketUsd,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_max_liquidation_order_ticket_usd"`
	DefaultMaxLiquidationOrderDuration  time.Duration                          `protobuf:"bytes,13,opt,name=default_max_liquidation_order_duration,json=defaultMaxLiquidationOrderDuration,proto3,stdduration" json:"default_max_liquidation_order_duration"`
	DefaultImpactSizeUsd                github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,14,opt,name=default_impact_size_usd,json=defaultImpactSizeUsd,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_impact_size_usd"`
	DefaultMarkPriceBand                uint32                                 `protobuf:"varint,15,opt,name=default_mark_price_band,json=defaultMarkPriceBand,proto3" json:"default_mark_price_band,omitempty"`
	DefaultLastPriceProtectedBand       uint32                                 `protobuf:"varint,16,opt,name=default_last_price_protected_band,json=defaultLastPriceProtectedBand,proto3" json:"default_last_price_protected_band,omitempty"`
	MaxActiveMarkets                    uint32                                 `protobuf:"varint,17,opt,name=max_active_markets,json=maxActiveMarkets,proto3" json:"max_active_markets,omitempty"`
	DefaultTradingBandwidth             uint32                                 `protobuf:"varint,18,opt,name=default_trading_bandwidth,json=defaultTradingBandwidth,proto3" json:"default_trading_bandwidth,omitempty"`
	FundingRateBand                     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,19,opt,name=funding_rate_band,json=fundingRateBand,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"funding_rate_band"`
	DefaultLpSpotTakerFee               github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,20,opt,name=default_lp_spot_taker_fee,json=defaultLpSpotTakerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_lp_spot_taker_fee"`
	DefaultLpSpotMakerFee               github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,21,opt,name=default_lp_spot_maker_fee,json=defaultLpSpotMakerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_lp_spot_maker_fee"`
	DefaultLpFuturesTakerFee            github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,22,opt,name=default_lp_futures_taker_fee,json=defaultLpFuturesTakerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_lp_futures_taker_fee"`
	DefaultLpFuturesMakerFee            github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,23,opt,name=default_lp_futures_maker_fee,json=defaultLpFuturesMakerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_lp_futures_maker_fee"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d04b58e21264476, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

type ControlledParams struct {
	PerpetualsFundingInterval time.Duration `protobuf:"bytes,1,opt,name=perpetuals_funding_interval,json=perpetualsFundingInterval,proto3,stdduration" json:"perpetuals_funding_interval"`
}

func (m *ControlledParams) Reset()         { *m = ControlledParams{} }
func (m *ControlledParams) String() string { return proto.CompactTextString(m) }
func (*ControlledParams) ProtoMessage()    {}
func (*ControlledParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d04b58e21264476, []int{1}
}
func (m *ControlledParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlledParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControlledParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControlledParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlledParams.Merge(m, src)
}
func (m *ControlledParams) XXX_Size() int {
	return m.Size()
}
func (m *ControlledParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlledParams.DiscardUnknown(m)
}

var xxx_messageInfo_ControlledParams proto.InternalMessageInfo

type Market struct {
	Name               string                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	DisplayName        string                                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" db:"display_name"`
	Description        string                                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" db:"description"`
	MarketType         string                                 `protobuf:"bytes,4,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty" db:"market_type"`
	Base               string                                 `protobuf:"bytes,5,opt,name=base,proto3" json:"base,omitempty" db:"base"`
	Quote              string                                 `protobuf:"bytes,6,opt,name=quote,proto3" json:"quote,omitempty" db:"quote"`
	BasePrecision      int64                                  `protobuf:"varint,7,opt,name=base_precision,json=basePrecision,proto3" json:"base_precision,omitempty" db:"base_precision"`
	QuotePrecision     int64                                  `protobuf:"varint,8,opt,name=quote_precision,json=quotePrecision,proto3" json:"quote_precision,omitempty" db:"quote_precision"`
	LotSize            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=lot_size,json=lotSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"lot_size" db:"lot_size"`
	TickSize           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=tick_size,json=tickSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tick_size" db:"tick_size"`
	MinQuantity        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,11,opt,name=min_quantity,json=minQuantity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_quantity" db:"min_quantity"`
	CreatedBlockHeight uint64                                 `protobuf:"varint,14,opt,name=created_block_height,json=createdBlockHeight,proto3" json:"created_block_height,omitempty" db:"created_block_height"`
	// futures only
	RiskStepSize                github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,100,opt,name=risk_step_size,json=riskStepSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"risk_step_size" db:"risk_step_size"`
	InitialMarginBase           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,101,opt,name=initial_margin_base,json=initialMarginBase,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"initial_margin_base" db:"initial_margin_base"`
	InitialMarginStep           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,102,opt,name=initial_margin_step,json=initialMarginStep,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"initial_margin_step" db:"initial_margin_step"`
	MaintenanceMarginRatio      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,103,opt,name=maintenance_margin_ratio,json=maintenanceMarginRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"maintenance_margin_ratio" db:"maintenance_margin_ratio"`
	MaxLiquidationOrderTicket   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,104,opt,name=max_liquidation_order_ticket,json=maxLiquidationOrderTicket,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_liquidation_order_ticket" db:"max_liquidation_order_ticket"`
	MaxLiquidationOrderDuration time.Duration                          `protobuf:"bytes,105,opt,name=max_liquidation_order_duration,json=maxLiquidationOrderDuration,proto3,stdduration" json:"max_liquidation_order_duration" db:"max_liquidation_order_duration"`
	ImpactSize                  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,106,opt,name=impact_size,json=impactSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"impact_size" db:"impact_size"`
	MarkPriceBand               uint32                                 `protobuf:"varint,107,opt,name=mark_price_band,json=markPriceBand,proto3" json:"mark_price_band,omitempty" db:"mark_price_band"`
	LastPriceProtectedBand      uint32                                 `protobuf:"varint,108,opt,name=last_price_protected_band,json=lastPriceProtectedBand,proto3" json:"last_price_protected_band,omitempty" db:"last_price_protected_band"`
	IndexOracleId               string                                 `protobuf:"bytes,109,opt,name=index_oracle_id,json=indexOracleId,proto3" json:"index_oracle_id,omitempty" db:"index_oracle_id"`
	ExpiryTime                  time.Time                              `protobuf:"bytes,110,opt,name=expiry_time,json=expiryTime,proto3,stdtime" json:"expiry_time" db:"expiry_time"`
	IsActive                    bool                                   `protobuf:"varint,111,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty" db:"is_active"`
	IsSettled                   bool                                   `protobuf:"varint,112,opt,name=is_settled,json=isSettled,proto3" json:"is_settled,omitempty" db:"is_settled"`
	ClosedBlockHeight           uint64                                 `protobuf:"varint,113,opt,name=closed_block_height,json=closedBlockHeight,proto3" json:"closed_block_height,omitempty" db:"closed_block_height"`
	TradingBandwidth            uint32                                 `protobuf:"varint,114,opt,name=trading_bandwidth,json=tradingBandwidth,proto3" json:"trading_bandwidth,omitempty" db:"trading_bandwidth"`
}

func (m *Market) Reset()         { *m = Market{} }
func (m *Market) String() string { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()    {}
func (*Market) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d04b58e21264476, []int{2}
}
func (m *Market) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Market) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Market.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Market) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Market.Merge(m, src)
}
func (m *Market) XXX_Size() int {
	return m.Size()
}
func (m *Market) XXX_DiscardUnknown() {
	xxx_messageInfo_Market.DiscardUnknown(m)
}

var xxx_messageInfo_Market proto.InternalMessageInfo

type MarketParams struct {
	Name        string                                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName *string                                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3,wktptr" json:"display_name,omitempty"`
	Description *string                                 `protobuf:"bytes,3,opt,name=description,proto3,wktptr" json:"description,omitempty"`
	LotSize     *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=lot_size,json=lotSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"lot_size,omitempty"`
	TickSize    *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=tick_size,json=tickSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tick_size,omitempty"`
	MinQuantity *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,12,opt,name=min_quantity,json=minQuantity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_quantity,omitempty"`
	// futures only
	RiskStepSize                *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,100,opt,name=risk_step_size,json=riskStepSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"risk_step_size,omitempty"`
	InitialMarginBase           *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,101,opt,name=initial_margin_base,json=initialMarginBase,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"initial_margin_base,omitempty"`
	InitialMarginStep           *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,102,opt,name=initial_margin_step,json=initialMarginStep,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"initial_margin_step,omitempty"`
	MaintenanceMarginRatio      *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,103,opt,name=maintenance_margin_ratio,json=maintenanceMarginRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"maintenance_margin_ratio,omitempty"`
	MaxLiquidationOrderTicket   *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,104,opt,name=max_liquidation_order_ticket,json=maxLiquidationOrderTicket,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_liquidation_order_ticket,omitempty"`
	MaxLiquidationOrderDuration *time.Duration                          `protobuf:"bytes,105,opt,name=max_liquidation_order_duration,json=maxLiquidationOrderDuration,proto3,stdduration" json:"max_liquidation_order_duration,omitempty"`
	ImpactSize                  *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,106,opt,name=impact_size,json=impactSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"impact_size,omitempty"`
	MarkPriceBand               *uint32                                 `protobuf:"bytes,107,opt,name=mark_price_band,json=markPriceBand,proto3,wktptr" json:"mark_price_band,omitempty"`
	LastPriceProtectedBand      *uint32                                 `protobuf:"bytes,108,opt,name=last_price_protected_band,json=lastPriceProtectedBand,proto3,wktptr" json:"last_price_protected_band,omitempty"`
	IsActive                    *bool                                   `protobuf:"bytes,111,opt,name=is_active,json=isActive,proto3,wktptr" json:"is_active,omitempty"`
	TradingBandwidth            *uint32                                 `protobuf:"bytes,114,opt,name=trading_bandwidth,json=tradingBandwidth,proto3,wktptr" json:"trading_bandwidth,omitempty"`
	ExpiryTime                  *time.Time                              `protobuf:"bytes,115,opt,name=expiry_time,json=expiryTime,proto3,stdtime" json:"expiry_time,omitempty" db:"expiry_time"`
}

func (m *MarketParams) Reset()         { *m = MarketParams{} }
func (m *MarketParams) String() string { return proto.CompactTextString(m) }
func (*MarketParams) ProtoMessage()    {}
func (*MarketParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d04b58e21264476, []int{3}
}
func (m *MarketParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketParams.Merge(m, src)
}
func (m *MarketParams) XXX_Size() int {
	return m.Size()
}
func (m *MarketParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketParams.DiscardUnknown(m)
}

var xxx_messageInfo_MarketParams proto.InternalMessageInfo

type IncomingDisableSpotMarketNames struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *IncomingDisableSpotMarketNames) Reset()         { *m = IncomingDisableSpotMarketNames{} }
func (m *IncomingDisableSpotMarketNames) String() string { return proto.CompactTextString(m) }
func (*IncomingDisableSpotMarketNames) ProtoMessage()    {}
func (*IncomingDisableSpotMarketNames) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d04b58e21264476, []int{4}
}
func (m *IncomingDisableSpotMarketNames) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncomingDisableSpotMarketNames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncomingDisableSpotMarketNames.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncomingDisableSpotMarketNames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncomingDisableSpotMarketNames.Merge(m, src)
}
func (m *IncomingDisableSpotMarketNames) XXX_Size() int {
	return m.Size()
}
func (m *IncomingDisableSpotMarketNames) XXX_DiscardUnknown() {
	xxx_messageInfo_IncomingDisableSpotMarketNames.DiscardUnknown(m)
}

var xxx_messageInfo_IncomingDisableSpotMarketNames proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "Switcheo.carbon.market.Params")
	proto.RegisterType((*ControlledParams)(nil), "Switcheo.carbon.market.ControlledParams")
	proto.RegisterType((*Market)(nil), "Switcheo.carbon.market.Market")
	proto.RegisterType((*MarketParams)(nil), "Switcheo.carbon.market.MarketParams")
	proto.RegisterType((*IncomingDisableSpotMarketNames)(nil), "Switcheo.carbon.market.IncomingDisableSpotMarketNames")
}

func init() { proto.RegisterFile("market/market.proto", fileDescriptor_0d04b58e21264476) }

var fileDescriptor_0d04b58e21264476 = []byte{
	// 1818 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xcf, 0x6f, 0x1b, 0xc7,
	0x15, 0xd6, 0xd6, 0xb2, 0x43, 0x0d, 0x45, 0x89, 0x1a, 0xc9, 0xf2, 0x4a, 0x96, 0xb9, 0xf2, 0xa4,
	0x08, 0x54, 0xa0, 0x25, 0x01, 0x05, 0x29, 0x0a, 0x03, 0x6d, 0x1d, 0xc6, 0x71, 0x22, 0x55, 0xaa,
	0x9c, 0x95, 0x52, 0xa0, 0x06, 0x92, 0xc5, 0x68, 0x77, 0x44, 0x4e, 0xb8, 0xbf, 0xbc, 0x33, 0x8c,
	0x24, 0x03, 0x3d, 0xf6, 0xd0, 0x53, 0x73, 0xe8, 0x21, 0xc7, 0xfc, 0x39, 0x3e, 0xa6, 0xb7, 0xb6,
	0x07, 0xb6, 0xb5, 0x2f, 0x3d, 0xf3, 0x2f, 0x28, 0x66, 0x66, 0x87, 0xbb, 0xe2, 0x2f, 0x91, 0x94,
	0x4e, 0xe2, 0xce, 0x9b, 0xf9, 0xbe, 0xf7, 0x76, 0x66, 0xde, 0xf7, 0x51, 0x04, 0xab, 0x01, 0x4e,
	0x5a, 0x84, 0xd7, 0xd4, 0x9f, 0x6a, 0x9c, 0x44, 0x3c, 0x82, 0xeb, 0xc7, 0xe7, 0x94, 0xbb, 0x4d,
	0x12, 0x55, 0x5d, 0x9c, 0x9c, 0x46, 0x61, 0x55, 0x45, 0x37, 0x2b, 0x8d, 0x28, 0x6a, 0xf8, 0xa4,
	0x26, 0x67, 0x9d, 0xb6, 0xcf, 0x6a, 0xe7, 0x09, 0x8e, 0x63, 0x92, 0x30, 0xb5, 0x6e, 0x73, 0xad,
	0x11, 0x35, 0x22, 0xf9, 0xb1, 0x26, 0x3e, 0xa5, 0xa3, 0x56, 0xff, 0x2a, 0x4e, 0x03, 0xc2, 0x38,
	0x0e, 0xe2, 0x74, 0xc2, 0x00, 0xac, 0xd7, 0x4e, 0x30, 0xa7, 0x51, 0xa8, 0xe2, 0xe8, 0xef, 0x10,
	0xdc, 0x7b, 0x81, 0x13, 0x1c, 0x30, 0xe8, 0x80, 0x35, 0x8f, 0x9c, 0xe1, 0xb6, 0xcf, 0x1d, 0x3f,
	0xe2, 0x0e, 0xa3, 0xaf, 0x89, 0xd3, 0x66, 0x9e, 0x69, 0x6c, 0x1b, 0x3b, 0x0b, 0xf5, 0xea, 0x9b,
	0x8e, 0x35, 0xf7, 0xaf, 0x8e, 0xf5, 0x41, 0x83, 0xf2, 0x66, 0xfb, 0xb4, 0xea, 0x46, 0x41, 0xcd,
	0x8d, 0x58, 0x10, 0xb1, 0xf4, 0xcf, 0x2f, 0x98, 0xd7, 0xaa, 0xf1, 0xcb, 0x98, 0xb0, 0xea, 0x33,
	0xe2, 0xda, 0x2b, 0x29, 0xd6, 0x41, 0xc4, 0x8f, 0xe9, 0x6b, 0xf2, 0x25, 0xf3, 0x20, 0x06, 0xf7,
	0x35, 0x01, 0xa7, 0x6e, 0x2b, 0x63, 0xf8, 0xc9, 0x4c, 0x0c, 0x30, 0x05, 0x3b, 0xa1, 0x6e, 0x4b,
	0x53, 0x34, 0x80, 0xa9, 0x29, 0x02, 0x1a, 0x3a, 0xaf, 0xda, 0x38, 0xe4, 0x94, 0x5f, 0x4a, 0x96,
	0x3b, 0x33, 0xb1, 0xe8, 0x94, 0x0f, 0x69, 0xf8, 0x45, 0x8a, 0x26, 0x88, 0xce, 0xc1, 0xba, 0x26,
	0x62, 0x71, 0xc4, 0x9d, 0x00, 0xb7, 0x48, 0xe2, 0x9c, 0x11, 0x62, 0xce, 0x4b, 0x9a, 0xfa, 0x74,
	0x34, 0xdd, 0x8e, 0xb5, 0xe4, 0x9d, 0x3e, 0x41, 0x3d, 0x18, 0x64, 0x1a, 0xf6, 0x6a, 0xca, 0x70,
	0x1c, 0x47, 0xfc, 0x50, 0x04, 0x9e, 0x13, 0x32, 0x40, 0xcc, 0x7b, 0xc4, 0x77, 0x6f, 0x42, 0xcc,
	0x47, 0x11, 0x9f, 0x68, 0xe2, 0x3f, 0x81, 0x0d, 0x4d, 0x7c, 0xd6, 0xe6, 0xed, 0x84, 0xb0, 0x5c,
	0xd1, 0xf7, 0x6e, 0xad, 0x68, 0x5d, 0xdd, 0x73, 0xc5, 0x71, 0x38, 0x86, 0x3e, 0x2b, 0xfd, 0xbd,
	0x5b, 0x2b, 0xbd, 0x8f, 0xbe, 0x57, 0xfd, 0x37, 0x60, 0x53, 0xd3, 0x27, 0x94, 0xb5, 0x1c, 0xc6,
	0x49, 0x9c, 0x1d, 0xe0, 0xc2, 0x4c, 0x47, 0x4b, 0x73, 0xd9, 0x94, 0xb5, 0x8e, 0x39, 0x89, 0xf5,
	0x21, 0x0e, 0xc0, 0x43, 0xcd, 0x45, 0x43, 0xca, 0x29, 0xf6, 0x9d, 0x00, 0x27, 0x0d, 0x1a, 0x3a,
	0xa7, 0x98, 0x11, 0x73, 0x61, 0x26, 0x32, 0x7d, 0x2f, 0xf6, 0x14, 0xe2, 0xa1, 0x04, 0xac, 0x63,
	0x46, 0xc6, 0xd0, 0x89, 0x22, 0x4d, 0x70, 0x7b, 0x74, 0xa2, 0x48, 0x78, 0x0e, 0xb6, 0x7b, 0x57,
	0x14, 0xd3, 0x90, 0x93, 0x10, 0x87, 0x2e, 0xd1, 0x94, 0xb2, 0x39, 0x99, 0xc5, 0x99, 0x38, 0x1f,
	0xe9, 0xab, 0x9a, 0xc1, 0x2a, 0x5e, 0x5b, 0x80, 0xc2, 0x3f, 0x1b, 0x60, 0x27, 0x63, 0xbe, 0x70,
	0x7c, 0xfa, 0xaa, 0x4d, 0x3d, 0xd9, 0x0c, 0x9d, 0x28, 0xf1, 0x48, 0x22, 0xbb, 0x12, 0xe1, 0x72,
	0x47, 0x17, 0x67, 0xca, 0xe0, 0xfd, 0x5e, 0x06, 0x17, 0x07, 0x19, 0xfa, 0x91, 0x00, 0x3f, 0x91,
	0xd8, 0xaa, 0x75, 0x7c, 0x30, 0x3e, 0x0d, 0xdd, 0xa2, 0xcd, 0xd2, 0xb6, 0xb1, 0x53, 0xdc, 0xdd,
	0xa8, 0xaa, 0x1e, 0x5e, 0xd5, 0x3d, 0xbc, 0xfa, 0x2c, 0x9d, 0x50, 0x2f, 0x88, 0xfc, 0xbe, 0xff,
	0xb7, 0x65, 0xd8, 0x68, 0x34, 0xb3, 0x9e, 0x0d, 0x09, 0x78, 0xd0, 0xdb, 0xe8, 0x20, 0xc6, 0x6e,
	0xae, 0xc7, 0x2f, 0xcd, 0x54, 0xae, 0xd6, 0x8b, 0x3d, 0x89, 0xa6, 0x8f, 0xef, 0x47, 0x19, 0x8d,
	0xd0, 0x36, 0x27, 0x4e, 0xa8, 0x4b, 0x9c, 0x53, 0x1c, 0x7a, 0xe6, 0xf2, 0xb6, 0xb1, 0x53, 0xea,
	0x2d, 0x3b, 0xc4, 0x49, 0xeb, 0x85, 0x08, 0xd6, 0x71, 0xe8, 0xc1, 0xcf, 0xc1, 0xe3, 0x9e, 0xfc,
	0x60, 0xc6, 0xd3, 0x65, 0xa2, 0x66, 0xe2, 0x72, 0xe2, 0x29, 0x80, 0xb2, 0x04, 0xd0, 0x1b, 0x7d,
	0x80, 0x19, 0x97, 0x00, 0x2f, 0xf4, 0x2c, 0x89, 0xf4, 0x73, 0x00, 0xc5, 0x8b, 0xc5, 0x2e, 0xa7,
	0xdf, 0xca, 0x83, 0xd5, 0x22, 0x9c, 0x99, 0x2b, 0x72, 0x69, 0x39, 0xc0, 0x17, 0x1f, 0xcb, 0xc0,
	0xa1, 0x1a, 0x87, 0x4f, 0xb2, 0xc6, 0xc2, 0x13, 0xec, 0xd1, 0xb0, 0x21, 0xa9, 0xce, 0xa9, 0xc7,
	0x9b, 0x26, 0x94, 0x8b, 0x74, 0x3d, 0x27, 0x2a, 0x5e, 0xd7, 0x61, 0xf8, 0x12, 0xac, 0x9c, 0xb5,
	0x43, 0xb9, 0x26, 0xc1, 0x3c, 0x2d, 0x72, 0x75, 0xa6, 0x77, 0xb9, 0x9c, 0x02, 0xd9, 0x98, 0xab,
	0xf7, 0xd1, 0xcc, 0xf2, 0xf2, 0xe3, 0xfe, 0x5e, 0xbf, 0x76, 0x23, 0x2d, 0x3b, 0x88, 0xaf, 0x74,
	0xf6, 0x21, 0x4c, 0x59, 0x67, 0xbf, 0x7f, 0x0b, 0x4c, 0xbd, 0x26, 0x1e, 0x82, 0xad, 0x1c, 0xd3,
	0x60, 0x1f, 0x5f, 0xbf, 0x51, 0xaf, 0x39, 0x88, 0xfb, 0xbb, 0xf6, 0x70, 0xbe, 0xac, 0xb8, 0x07,
	0xb7, 0xc3, 0xa7, 0xeb, 0x7b, 0x32, 0xff, 0xfd, 0x0f, 0xd6, 0x1c, 0x3a, 0x07, 0xe5, 0x4f, 0xa2,
	0x90, 0x27, 0x91, 0xef, 0x13, 0x2f, 0x35, 0x57, 0x2e, 0x78, 0x18, 0x93, 0x24, 0x26, 0xbc, 0x8d,
	0x7d, 0xe6, 0xe8, 0x43, 0x23, 0xfa, 0x54, 0xf2, 0x2d, 0xf6, 0xa5, 0xc7, 0x9a, 0xf0, 0xa6, 0x6f,
	0x64, 0x38, 0xcf, 0x15, 0xcc, 0x5e, 0x8a, 0x82, 0xfe, 0xb9, 0x02, 0xee, 0xa9, 0x63, 0x0d, 0x1f,
	0x83, 0xf9, 0x10, 0x07, 0x24, 0x35, 0x6f, 0xa5, 0x6e, 0xc7, 0x5a, 0x10, 0x5a, 0x27, 0xc6, 0x90,
	0x2d, 0x43, 0xf0, 0x57, 0x60, 0xd1, 0xa3, 0x2c, 0xf6, 0xf1, 0xa5, 0x23, 0xa7, 0x2a, 0x17, 0x76,
	0xbf, 0xdb, 0xb1, 0x56, 0xc4, 0xd4, 0x7c, 0x0c, 0xd9, 0xc5, 0xf4, 0xf1, 0xf7, 0x62, 0xe5, 0x2f,
	0x41, 0xd1, 0x23, 0xcc, 0x4d, 0x68, 0x2c, 0xdb, 0x94, 0x32, 0x56, 0x6b, 0xdd, 0x8e, 0x55, 0x96,
	0x0b, 0xb3, 0x90, 0x58, 0x97, 0x3d, 0xc1, 0x8f, 0x40, 0x51, 0xdd, 0x46, 0x47, 0xbc, 0xcc, 0xd4,
	0x29, 0xf5, 0xd6, 0xe5, 0x42, 0xc8, 0x06, 0xea, 0xe9, 0xe4, 0x32, 0x26, 0xa2, 0x16, 0x29, 0x7c,
	0x77, 0xaf, 0xd6, 0x22, 0xc6, 0x90, 0x2d, 0x43, 0xf0, 0xa7, 0xe0, 0xee, 0xab, 0x76, 0xc4, 0xb5,
	0x11, 0x59, 0xea, 0x76, 0x2c, 0x20, 0xe6, 0xc8, 0x41, 0x64, 0xab, 0x20, 0xfc, 0x0d, 0x58, 0x12,
	0xb3, 0x9d, 0x38, 0x21, 0x2e, 0x65, 0x22, 0x75, 0x61, 0x1c, 0xee, 0xd4, 0x1f, 0x74, 0x3b, 0xd6,
	0xaa, 0x86, 0xcc, 0xa2, 0xc8, 0x2e, 0x89, 0x81, 0x17, 0xfa, 0x19, 0x7e, 0x0c, 0x96, 0x25, 0x50,
	0x0e, 0xa0, 0x20, 0x01, 0xcc, 0x6e, 0xc7, 0x5a, 0xeb, 0xf1, 0xe5, 0x11, 0x96, 0xe4, 0x48, 0x06,
	0xf1, 0x12, 0x14, 0xb4, 0xb9, 0x4e, 0x85, 0xfc, 0xb7, 0x53, 0x9c, 0xbe, 0xbd, 0x90, 0x77, 0x3b,
	0x56, 0x49, 0x30, 0x69, 0x14, 0x64, 0xbf, 0xe7, 0x2b, 0x8b, 0x0d, 0xbf, 0x02, 0x0b, 0x3d, 0x5f,
	0x9d, 0xca, 0xf6, 0xd3, 0x19, 0x2d, 0x91, 0x86, 0x41, 0x76, 0x81, 0xa7, 0xf6, 0x1a, 0x9e, 0x81,
	0xc5, 0xbc, 0xa7, 0x4e, 0x45, 0xfa, 0x93, 0xa9, 0xd3, 0x97, 0xa7, 0x2b, 0x8f, 0x84, 0xec, 0x62,
	0x90, 0xb9, 0x6b, 0x78, 0x04, 0xd6, 0xdc, 0x84, 0x60, 0xd9, 0xf3, 0xfd, 0xc8, 0x6d, 0x39, 0x4d,
	0x42, 0x1b, 0x4d, 0x2e, 0x35, 0x6a, 0xbe, 0xfe, 0xa8, 0xdb, 0xb1, 0x36, 0x04, 0xc2, 0xb0, 0x39,
	0xc8, 0x86, 0xe9, 0x70, 0x5d, 0x8c, 0x7e, 0x2e, 0x07, 0x61, 0x0b, 0x2c, 0x5d, 0xf5, 0x6c, 0xa6,
	0x27, 0x53, 0xff, 0x74, 0xea, 0xd4, 0xe5, 0x21, 0xb9, 0x8a, 0x85, 0xec, 0xc5, 0x24, 0xe7, 0xdf,
	0xe0, 0x6b, 0xb0, 0x3a, 0xcc, 0xb4, 0x11, 0xc9, 0xb8, 0x3f, 0xf5, 0x76, 0x98, 0x82, 0x71, 0x08,
	0x20, 0xb2, 0x57, 0xe8, 0x80, 0x93, 0x1b, 0xe4, 0x96, 0x0e, 0xee, 0xec, 0x16, 0xb9, 0x05, 0x60,
	0x3f, 0xb7, 0xb4, 0x75, 0x7f, 0x31, 0x80, 0x39, 0xd2, 0xcf, 0x35, 0x64, 0x06, 0x47, 0x53, 0x67,
	0xf0, 0x48, 0xf5, 0x85, 0xe1, 0xa8, 0xc8, 0x5e, 0x0f, 0x86, 0x3b, 0xbd, 0xbf, 0x19, 0x60, 0x6b,
	0x9c, 0xc3, 0x33, 0x9b, 0x32, 0x9f, 0xe3, 0xa9, 0xf7, 0xff, 0xb1, 0xca, 0x67, 0x34, 0x32, 0xb2,
	0x37, 0x82, 0x51, 0xde, 0x0f, 0xfe, 0xd5, 0x00, 0x95, 0x6b, 0x1c, 0x1f, 0xbd, 0x4e, 0x07, 0x6a,
	0x22, 0xe7, 0x6e, 0xc7, 0x7a, 0x7f, 0x74, 0x26, 0x1a, 0x0c, 0x49, 0xb9, 0x78, 0x18, 0x8c, 0x71,
	0x84, 0x2e, 0x28, 0xe6, 0x9c, 0xa0, 0xf9, 0xcd, 0xd4, 0x5f, 0xa3, 0xd4, 0x6b, 0x91, 0xed, 0x3b,
	0x07, 0x84, 0x6c, 0x40, 0x7b, 0x96, 0x10, 0x3e, 0x05, 0xcb, 0xfd, 0x3e, 0xb0, 0x25, 0x6c, 0x55,
	0xd6, 0x35, 0xfb, 0xc2, 0xc8, 0x2e, 0x05, 0x57, 0xac, 0xe1, 0x57, 0x60, 0x63, 0xb4, 0x25, 0xf4,
	0x25, 0x16, 0xea, 0x76, 0xac, 0x8a, 0xec, 0x8b, 0xa3, 0x26, 0x22, 0x7b, 0xdd, 0x1f, 0xee, 0x17,
	0x9f, 0x82, 0x65, 0x1a, 0x7a, 0xe4, 0xc2, 0x89, 0x12, 0xec, 0xfa, 0xc4, 0xa1, 0x9e, 0x19, 0xc8,
	0x37, 0xd1, 0x4b, 0xb0, 0x2f, 0x8c, 0xec, 0x92, 0x1c, 0x39, 0x92, 0x03, 0x7b, 0x1e, 0xfc, 0x23,
	0x28, 0x92, 0x8b, 0x98, 0x26, 0x97, 0x0e, 0xa7, 0x01, 0x31, 0x43, 0xb9, 0x8b, 0x9b, 0x03, 0xbb,
	0x78, 0xa2, 0xff, 0x39, 0x53, 0xdf, 0x4a, 0xb7, 0x51, 0xbe, 0xb9, 0xdc, 0x52, 0xf4, 0x9d, 0xd8,
	0x33, 0xa0, 0x46, 0xc4, 0x74, 0x58, 0x03, 0x0b, 0x94, 0xa5, 0x5e, 0xd6, 0x8c, 0xb6, 0x8d, 0x9d,
	0x42, 0x1d, 0xea, 0x36, 0xdd, 0x0b, 0x20, 0xbb, 0x40, 0x99, 0xb2, 0xb5, 0x70, 0x17, 0x00, 0xca,
	0x1c, 0x46, 0x38, 0xf7, 0x89, 0x67, 0xc6, 0x72, 0xc5, 0x6a, 0xb7, 0x63, 0x2d, 0xa7, 0x2b, 0xd2,
	0x08, 0xb2, 0x17, 0x28, 0x3b, 0x56, 0x9f, 0xe1, 0x01, 0x58, 0x75, 0xfd, 0x88, 0xf5, 0x77, 0xdc,
	0x57, 0xb2, 0xe3, 0x6e, 0xe9, 0x56, 0x30, 0x64, 0x0a, 0xb2, 0x57, 0xd4, 0x68, 0xbe, 0xdf, 0x7e,
	0x06, 0x56, 0x06, 0x9d, 0x74, 0x22, 0xb7, 0x69, 0xb3, 0xdb, 0xb1, 0xd6, 0xa5, 0xc2, 0xf4, 0x4f,
	0x40, 0x76, 0x99, 0xf7, 0xd9, 0xeb, 0xfd, 0xf9, 0xc2, 0x62, 0xb9, 0xb4, 0x3f, 0x5f, 0x28, 0x95,
	0x97, 0xd0, 0xff, 0x8a, 0x60, 0x51, 0x79, 0x9b, 0xd4, 0x51, 0xc1, 0xbc, 0xc3, 0x49, 0x2d, 0xcd,
	0xa7, 0x43, 0x2c, 0x4d, 0x71, 0x77, 0x6b, 0x60, 0x23, 0x8e, 0x79, 0x42, 0xc3, 0xc6, 0x1f, 0xb0,
	0xdf, 0x26, 0xf5, 0xf9, 0x1f, 0xc4, 0x2b, 0xbf, 0xe2, 0x6f, 0x9e, 0x0d, 0xfa, 0x9b, 0x49, 0x51,
	0x72, 0x6e, 0x67, 0x2f, 0x27, 0xf5, 0xd9, 0x97, 0x68, 0x63, 0xf2, 0x9b, 0x95, 0x29, 0xfb, 0xef,
	0xf2, 0xca, 0x5e, 0x9c, 0x1a, 0x4b, 0x98, 0xd6, 0x4c, 0xc7, 0xbf, 0xe8, 0xd3, 0xf1, 0xc5, 0x99,
	0x72, 0xbb, 0x22, 0xd9, 0x27, 0x23, 0x14, 0x76, 0x5a, 0xd0, 0xab, 0x52, 0xfa, 0xf5, 0x38, 0x29,
	0x9d, 0xb6, 0xfe, 0x21, 0x72, 0xf9, 0xf5, 0x38, 0xb9, 0xbc, 0x19, 0xbe, 0x94, 0xc4, 0xe6, 0xb5,
	0x8a, 0x38, 0x2d, 0xc9, 0x28, 0xc1, 0x8b, 0x26, 0xd2, 0xbb, 0x69, 0x77, 0x63, 0x8c, 0x94, 0x35,
	0x6f, 0xae, 0x64, 0xe2, 0x1b, 0x8d, 0x71, 0xbd, 0x44, 0x1d, 0x0d, 0x93, 0xa8, 0x69, 0x2b, 0xc9,
	0xcb, 0xd1, 0xfe, 0x70, 0x39, 0x1a, 0x76, 0xc1, 0xbf, 0xdc, 0x0b, 0xf9, 0x87, 0xbb, 0xf9, 0x0b,
	0x3e, 0xad, 0x30, 0x4d, 0x86, 0x3a, 0x4a, 0x98, 0x7e, 0xdd, 0xdf, 0xfb, 0x87, 0x89, 0x4a, 0x3d,
	0x8a, 0xfc, 0x3c, 0x58, 0xa6, 0x04, 0x47, 0xa3, 0xfa, 0xf0, 0x64, 0x59, 0x0d, 0xf4, 0xe3, 0x7e,
	0x99, 0x63, 0x13, 0xc9, 0x9c, 0x31, 0x89, 0xcc, 0xa9, 0x26, 0xbf, 0x3f, 0x5f, 0x58, 0x2a, 0x2f,
	0xa3, 0x5d, 0x50, 0xd9, 0x0b, 0xdd, 0x28, 0xa0, 0x61, 0xe3, 0x19, 0x65, 0xf8, 0xd4, 0x27, 0xea,
	0x9f, 0x08, 0xa2, 0xf9, 0x8b, 0xfe, 0xcc, 0x60, 0x19, 0xdc, 0xa1, 0x1e, 0x33, 0x8d, 0xed, 0x3b,
	0x3b, 0x0b, 0xb6, 0xf8, 0x58, 0xff, 0xec, 0xcd, 0x7f, 0x2b, 0x73, 0x6f, 0xde, 0x56, 0x8c, 0x1f,
	0xdf, 0x56, 0x8c, 0xff, 0xbc, 0xad, 0x18, 0xdf, 0xbd, 0xab, 0xcc, 0xfd, 0xf8, 0xae, 0x32, 0xf7,
	0x8f, 0x77, 0x95, 0xb9, 0x97, 0x3f, 0xcb, 0x9d, 0x13, 0xfd, 0xfb, 0x4b, 0x4d, 0xfd, 0xfe, 0x52,
	0xbb, 0x48, 0x7f, 0x9f, 0x51, 0xc7, 0xe5, 0xf4, 0x9e, 0x2c, 0xe3, 0xc3, 0xff, 0x07, 0x00, 0x00,
	0xff, 0xff, 0xfa, 0xf5, 0x14, 0x21, 0xbd, 0x19, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DefaultLpFuturesMakerFee.Size()
		i -= size
		if _, err := m.DefaultLpFuturesMakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	{
		size := m.DefaultLpFuturesTakerFee.Size()
		i -= size
		if _, err := m.DefaultLpFuturesTakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	{
		size := m.DefaultLpSpotMakerFee.Size()
		i -= size
		if _, err := m.DefaultLpSpotMakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	{
		size := m.DefaultLpSpotTakerFee.Size()
		i -= size
		if _, err := m.DefaultLpSpotTakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	{
		size := m.FundingRateBand.Size()
		i -= size
		if _, err := m.FundingRateBand.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	if m.DefaultTradingBandwidth != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.DefaultTradingBandwidth))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.MaxActiveMarkets != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.MaxActiveMarkets))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.DefaultLastPriceProtectedBand != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.DefaultLastPriceProtectedBand))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.DefaultMarkPriceBand != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.DefaultMarkPriceBand))
		i--
		dAtA[i] = 0x78
	}
	{
		size := m.DefaultImpactSizeUsd.Size()
		i -= size
		if _, err := m.DefaultImpactSizeUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.DefaultMaxLiquidationOrderDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.DefaultMaxLiquidationOrderDuration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintMarket(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x6a
	{
		size := m.DefaultMaxLiquidationOrderTicketUsd.Size()
		i -= size
		if _, err := m.DefaultMaxLiquidationOrderTicketUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.DefaultMaintenanceMarginRatio.Size()
		i -= size
		if _, err := m.DefaultMaintenanceMarginRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.DefaultInitialMarginStep.Size()
		i -= size
		if _, err := m.DefaultInitialMarginStep.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.DefaultInitialMarginBase.Size()
		i -= size
		if _, err := m.DefaultInitialMarginBase.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.DefaultRiskStepSizeUsd.Size()
		i -= size
		if _, err := m.DefaultRiskStepSizeUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.DefaultFuturesTakerFee.Size()
		i -= size
		if _, err := m.DefaultFuturesTakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.DefaultFuturesMakerFee.Size()
		i -= size
		if _, err := m.DefaultFuturesMakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.DefaultSpotTakerFee.Size()
		i -= size
		if _, err := m.DefaultSpotTakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.DefaultSpotMakerFee.Size()
		i -= size
		if _, err := m.DefaultSpotMakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.DefaultMinQuantityUsd.Size()
		i -= size
		if _, err := m.DefaultMinQuantityUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.DefaultTickSizeUsd.Size()
		i -= size
		if _, err := m.DefaultTickSizeUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.DefaultLotSizeUsd.Size()
		i -= size
		if _, err := m.DefaultLotSizeUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ControlledParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlledParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControlledParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.PerpetualsFundingInterval, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.PerpetualsFundingInterval):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintMarket(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Market) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Market) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Market) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradingBandwidth != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.TradingBandwidth))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x90
	}
	if m.ClosedBlockHeight != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.ClosedBlockHeight))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x88
	}
	if m.IsSettled {
		i--
		if m.IsSettled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x80
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf8
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpiryTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpiryTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintMarket(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xf2
	if len(m.IndexOracleId) > 0 {
		i -= len(m.IndexOracleId)
		copy(dAtA[i:], m.IndexOracleId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.IndexOracleId)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xea
	}
	if m.LastPriceProtectedBand != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.LastPriceProtectedBand))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe0
	}
	if m.MarkPriceBand != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.MarkPriceBand))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd8
	}
	{
		size := m.ImpactSize.Size()
		i -= size
		if _, err := m.ImpactSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xd2
	n4, err4 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MaxLiquidationOrderDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxLiquidationOrderDuration):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintMarket(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xca
	{
		size := m.MaxLiquidationOrderTicket.Size()
		i -= size
		if _, err := m.MaxLiquidationOrderTicket.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xc2
	{
		size := m.MaintenanceMarginRatio.Size()
		i -= size
		if _, err := m.MaintenanceMarginRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xba
	{
		size := m.InitialMarginStep.Size()
		i -= size
		if _, err := m.InitialMarginStep.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xb2
	{
		size := m.InitialMarginBase.Size()
		i -= size
		if _, err := m.InitialMarginBase.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xaa
	{
		size := m.RiskStepSize.Size()
		i -= size
		if _, err := m.RiskStepSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa2
	if m.CreatedBlockHeight != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.CreatedBlockHeight))
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.MinQuantity.Size()
		i -= size
		if _, err := m.MinQuantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.TickSize.Size()
		i -= size
		if _, err := m.TickSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.LotSize.Size()
		i -= size
		if _, err := m.LotSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.QuotePrecision != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.QuotePrecision))
		i--
		dAtA[i] = 0x40
	}
	if m.BasePrecision != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.BasePrecision))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Quote) > 0 {
		i -= len(m.Quote)
		copy(dAtA[i:], m.Quote)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Quote)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Base) > 0 {
		i -= len(m.Base)
		copy(dAtA[i:], m.Base)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Base)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MarketType) > 0 {
		i -= len(m.MarketType)
		copy(dAtA[i:], m.MarketType)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.MarketType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarketParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiryTime != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ExpiryTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiryTime):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintMarket(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x9a
	}
	if m.TradingBandwidth != nil {
		n6, err6 := github_com_gogo_protobuf_types.StdUInt32MarshalTo(*m.TradingBandwidth, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdUInt32(*m.TradingBandwidth):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintMarket(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x92
	}
	if m.IsActive != nil {
		n7, err7 := github_com_gogo_protobuf_types.StdBoolMarshalTo(*m.IsActive, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdBool(*m.IsActive):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintMarket(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xfa
	}
	if m.LastPriceProtectedBand != nil {
		n8, err8 := github_com_gogo_protobuf_types.StdUInt32MarshalTo(*m.LastPriceProtectedBand, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdUInt32(*m.LastPriceProtectedBand):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintMarket(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe2
	}
	if m.MarkPriceBand != nil {
		n9, err9 := github_com_gogo_protobuf_types.StdUInt32MarshalTo(*m.MarkPriceBand, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdUInt32(*m.MarkPriceBand):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintMarket(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xda
	}
	if m.ImpactSize != nil {
		{
			size := m.ImpactSize.Size()
			i -= size
			if _, err := m.ImpactSize.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd2
	}
	if m.MaxLiquidationOrderDuration != nil {
		n10, err10 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.MaxLiquidationOrderDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.MaxLiquidationOrderDuration):])
		if err10 != nil {
			return 0, err10
		}
		i -= n10
		i = encodeVarintMarket(dAtA, i, uint64(n10))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if m.MaxLiquidationOrderTicket != nil {
		{
			size := m.MaxLiquidationOrderTicket.Size()
			i -= size
			if _, err := m.MaxLiquidationOrderTicket.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if m.MaintenanceMarginRatio != nil {
		{
			size := m.MaintenanceMarginRatio.Size()
			i -= size
			if _, err := m.MaintenanceMarginRatio.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if m.InitialMarginStep != nil {
		{
			size := m.InitialMarginStep.Size()
			i -= size
			if _, err := m.InitialMarginStep.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if m.InitialMarginBase != nil {
		{
			size := m.InitialMarginBase.Size()
			i -= size
			if _, err := m.InitialMarginBase.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.RiskStepSize != nil {
		{
			size := m.RiskStepSize.Size()
			i -= size
			if _, err := m.RiskStepSize.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.MinQuantity != nil {
		{
			size := m.MinQuantity.Size()
			i -= size
			if _, err := m.MinQuantity.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.TickSize != nil {
		{
			size := m.TickSize.Size()
			i -= size
			if _, err := m.TickSize.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.LotSize != nil {
		{
			size := m.LotSize.Size()
			i -= size
			if _, err := m.LotSize.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Description != nil {
		n11, err11 := github_com_gogo_protobuf_types.StdStringMarshalTo(*m.Description, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdString(*m.Description):])
		if err11 != nil {
			return 0, err11
		}
		i -= n11
		i = encodeVarintMarket(dAtA, i, uint64(n11))
		i--
		dAtA[i] = 0x1a
	}
	if m.DisplayName != nil {
		n12, err12 := github_com_gogo_protobuf_types.StdStringMarshalTo(*m.DisplayName, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdString(*m.DisplayName):])
		if err12 != nil {
			return 0, err12
		}
		i -= n12
		i = encodeVarintMarket(dAtA, i, uint64(n12))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IncomingDisableSpotMarketNames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncomingDisableSpotMarketNames) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncomingDisableSpotMarketNames) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintMarket(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DefaultLotSizeUsd.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.DefaultTickSizeUsd.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.DefaultMinQuantityUsd.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.DefaultSpotMakerFee.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.DefaultSpotTakerFee.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.DefaultFuturesMakerFee.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.DefaultFuturesTakerFee.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.DefaultRiskStepSizeUsd.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.DefaultInitialMarginBase.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.DefaultInitialMarginStep.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.DefaultMaintenanceMarginRatio.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.DefaultMaxLiquidationOrderTicketUsd.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.DefaultMaxLiquidationOrderDuration)
	n += 1 + l + sovMarket(uint64(l))
	l = m.DefaultImpactSizeUsd.Size()
	n += 1 + l + sovMarket(uint64(l))
	if m.DefaultMarkPriceBand != 0 {
		n += 1 + sovMarket(uint64(m.DefaultMarkPriceBand))
	}
	if m.DefaultLastPriceProtectedBand != 0 {
		n += 2 + sovMarket(uint64(m.DefaultLastPriceProtectedBand))
	}
	if m.MaxActiveMarkets != 0 {
		n += 2 + sovMarket(uint64(m.MaxActiveMarkets))
	}
	if m.DefaultTradingBandwidth != 0 {
		n += 2 + sovMarket(uint64(m.DefaultTradingBandwidth))
	}
	l = m.FundingRateBand.Size()
	n += 2 + l + sovMarket(uint64(l))
	l = m.DefaultLpSpotTakerFee.Size()
	n += 2 + l + sovMarket(uint64(l))
	l = m.DefaultLpSpotMakerFee.Size()
	n += 2 + l + sovMarket(uint64(l))
	l = m.DefaultLpFuturesTakerFee.Size()
	n += 2 + l + sovMarket(uint64(l))
	l = m.DefaultLpFuturesMakerFee.Size()
	n += 2 + l + sovMarket(uint64(l))
	return n
}

func (m *ControlledParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.PerpetualsFundingInterval)
	n += 1 + l + sovMarket(uint64(l))
	return n
}

func (m *Market) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.MarketType)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.Base)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.Quote)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.BasePrecision != 0 {
		n += 1 + sovMarket(uint64(m.BasePrecision))
	}
	if m.QuotePrecision != 0 {
		n += 1 + sovMarket(uint64(m.QuotePrecision))
	}
	l = m.LotSize.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.TickSize.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.MinQuantity.Size()
	n += 1 + l + sovMarket(uint64(l))
	if m.CreatedBlockHeight != 0 {
		n += 1 + sovMarket(uint64(m.CreatedBlockHeight))
	}
	l = m.RiskStepSize.Size()
	n += 2 + l + sovMarket(uint64(l))
	l = m.InitialMarginBase.Size()
	n += 2 + l + sovMarket(uint64(l))
	l = m.InitialMarginStep.Size()
	n += 2 + l + sovMarket(uint64(l))
	l = m.MaintenanceMarginRatio.Size()
	n += 2 + l + sovMarket(uint64(l))
	l = m.MaxLiquidationOrderTicket.Size()
	n += 2 + l + sovMarket(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxLiquidationOrderDuration)
	n += 2 + l + sovMarket(uint64(l))
	l = m.ImpactSize.Size()
	n += 2 + l + sovMarket(uint64(l))
	if m.MarkPriceBand != 0 {
		n += 2 + sovMarket(uint64(m.MarkPriceBand))
	}
	if m.LastPriceProtectedBand != 0 {
		n += 2 + sovMarket(uint64(m.LastPriceProtectedBand))
	}
	l = len(m.IndexOracleId)
	if l > 0 {
		n += 2 + l + sovMarket(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpiryTime)
	n += 2 + l + sovMarket(uint64(l))
	if m.IsActive {
		n += 3
	}
	if m.IsSettled {
		n += 3
	}
	if m.ClosedBlockHeight != 0 {
		n += 2 + sovMarket(uint64(m.ClosedBlockHeight))
	}
	if m.TradingBandwidth != 0 {
		n += 2 + sovMarket(uint64(m.TradingBandwidth))
	}
	return n
}

func (m *MarketParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.DisplayName != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdString(*m.DisplayName)
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.Description != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdString(*m.Description)
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.LotSize != nil {
		l = m.LotSize.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.TickSize != nil {
		l = m.TickSize.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.MinQuantity != nil {
		l = m.MinQuantity.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.RiskStepSize != nil {
		l = m.RiskStepSize.Size()
		n += 2 + l + sovMarket(uint64(l))
	}
	if m.InitialMarginBase != nil {
		l = m.InitialMarginBase.Size()
		n += 2 + l + sovMarket(uint64(l))
	}
	if m.InitialMarginStep != nil {
		l = m.InitialMarginStep.Size()
		n += 2 + l + sovMarket(uint64(l))
	}
	if m.MaintenanceMarginRatio != nil {
		l = m.MaintenanceMarginRatio.Size()
		n += 2 + l + sovMarket(uint64(l))
	}
	if m.MaxLiquidationOrderTicket != nil {
		l = m.MaxLiquidationOrderTicket.Size()
		n += 2 + l + sovMarket(uint64(l))
	}
	if m.MaxLiquidationOrderDuration != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.MaxLiquidationOrderDuration)
		n += 2 + l + sovMarket(uint64(l))
	}
	if m.ImpactSize != nil {
		l = m.ImpactSize.Size()
		n += 2 + l + sovMarket(uint64(l))
	}
	if m.MarkPriceBand != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdUInt32(*m.MarkPriceBand)
		n += 2 + l + sovMarket(uint64(l))
	}
	if m.LastPriceProtectedBand != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdUInt32(*m.LastPriceProtectedBand)
		n += 2 + l + sovMarket(uint64(l))
	}
	if m.IsActive != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdBool(*m.IsActive)
		n += 2 + l + sovMarket(uint64(l))
	}
	if m.TradingBandwidth != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdUInt32(*m.TradingBandwidth)
		n += 2 + l + sovMarket(uint64(l))
	}
	if m.ExpiryTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiryTime)
		n += 2 + l + sovMarket(uint64(l))
	}
	return n
}

func (m *IncomingDisableSpotMarketNames) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovMarket(uint64(l))
		}
	}
	return n
}

func sovMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarket(x uint64) (n int) {
	return sovMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLotSizeUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultLotSizeUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTickSizeUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultTickSizeUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMinQuantityUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultMinQuantityUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSpotMakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultSpotMakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSpotTakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultSpotTakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFuturesMakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultFuturesMakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFuturesTakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultFuturesTakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRiskStepSizeUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultRiskStepSizeUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultInitialMarginBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultInitialMarginBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultInitialMarginStep", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultInitialMarginStep.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMaintenanceMarginRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultMaintenanceMarginRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMaxLiquidationOrderTicketUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultMaxLiquidationOrderTicketUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMaxLiquidationOrderDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.DefaultMaxLiquidationOrderDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultImpactSizeUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultImpactSizeUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMarkPriceBand", wireType)
			}
			m.DefaultMarkPriceBand = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultMarkPriceBand |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLastPriceProtectedBand", wireType)
			}
			m.DefaultLastPriceProtectedBand = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultLastPriceProtectedBand |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxActiveMarkets", wireType)
			}
			m.MaxActiveMarkets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxActiveMarkets |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTradingBandwidth", wireType)
			}
			m.DefaultTradingBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultTradingBandwidth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingRateBand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FundingRateBand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLpSpotTakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultLpSpotTakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLpSpotMakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultLpSpotMakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLpFuturesTakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultLpFuturesTakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLpFuturesMakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultLpFuturesMakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlledParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlledParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlledParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualsFundingInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.PerpetualsFundingInterval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Market) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Market: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Market: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePrecision", wireType)
			}
			m.BasePrecision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BasePrecision |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuotePrecision", wireType)
			}
			m.QuotePrecision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuotePrecision |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LotSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TickSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinQuantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinQuantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBlockHeight", wireType)
			}
			m.CreatedBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskStepSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RiskStepSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialMarginBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialMarginBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialMarginStep", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialMarginStep.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaintenanceMarginRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaintenanceMarginRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLiquidationOrderTicket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxLiquidationOrderTicket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLiquidationOrderDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MaxLiquidationOrderDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpactSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ImpactSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 107:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkPriceBand", wireType)
			}
			m.MarkPriceBand = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarkPriceBand |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 108:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPriceProtectedBand", wireType)
			}
			m.LastPriceProtectedBand = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPriceProtectedBand |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 109:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexOracleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexOracleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpiryTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 111:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 112:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSettled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSettled = bool(v != 0)
		case 113:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedBlockHeight", wireType)
			}
			m.ClosedBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosedBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 114:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingBandwidth", wireType)
			}
			m.TradingBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradingBandwidth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisplayName == nil {
				m.DisplayName = new(string)
			}
			if err := github_com_gogo_protobuf_types.StdStringUnmarshal(m.DisplayName, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = new(string)
			}
			if err := github_com_gogo_protobuf_types.StdStringUnmarshal(m.Description, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.LotSize = &v
			if err := m.LotSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.TickSize = &v
			if err := m.TickSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinQuantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.MinQuantity = &v
			if err := m.MinQuantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskStepSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.RiskStepSize = &v
			if err := m.RiskStepSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialMarginBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.InitialMarginBase = &v
			if err := m.InitialMarginBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialMarginStep", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.InitialMarginStep = &v
			if err := m.InitialMarginStep.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaintenanceMarginRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.MaintenanceMarginRatio = &v
			if err := m.MaintenanceMarginRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLiquidationOrderTicket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.MaxLiquidationOrderTicket = &v
			if err := m.MaxLiquidationOrderTicket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLiquidationOrderDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxLiquidationOrderDuration == nil {
				m.MaxLiquidationOrderDuration = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.MaxLiquidationOrderDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpactSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.ImpactSize = &v
			if err := m.ImpactSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkPriceBand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarkPriceBand == nil {
				m.MarkPriceBand = new(uint32)
			}
			if err := github_com_gogo_protobuf_types.StdUInt32Unmarshal(m.MarkPriceBand, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPriceProtectedBand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastPriceProtectedBand == nil {
				m.LastPriceProtectedBand = new(uint32)
			}
			if err := github_com_gogo_protobuf_types.StdUInt32Unmarshal(m.LastPriceProtectedBand, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 111:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsActive == nil {
				m.IsActive = new(bool)
			}
			if err := github_com_gogo_protobuf_types.StdBoolUnmarshal(m.IsActive, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 114:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingBandwidth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingBandwidth == nil {
				m.TradingBandwidth = new(uint32)
			}
			if err := github_com_gogo_protobuf_types.StdUInt32Unmarshal(m.TradingBandwidth, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 115:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiryTime == nil {
				m.ExpiryTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ExpiryTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncomingDisableSpotMarketNames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncomingDisableSpotMarketNames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncomingDisableSpotMarketNames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarket = fmt.Errorf("proto: unexpected end of group")
)
